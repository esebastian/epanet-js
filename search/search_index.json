{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Custom Theme \u00b6 Lets see if this work","title":"Home"},{"location":"#custom-theme","text":"Lets see if this work","title":"Custom Theme"},{"location":"api/","text":"Overview \u00b6 epanet-js contains two classes, Workspace & Project. A Workspace represents a virtual file system where you can store and read files that are consumed by the tool kit, such as INP Files or generated by it, such as RPT files or OUT files . A Project is a single instance of the EN_Project wrapper object and a singleton with all 122 toolkit methods attached. A full list of all methods can be found on the wiki. All method names have been converted to camelCase to keep with javascript convention. Create a Project object by instancing the Project class with a Workspace object. import { Project , Workspace } from `epanet-js` const ws = new Workspace () const model = new Project ( ws ) If you are not familiar with the OWA-EPANET Toolkit API or EPANET it is worthwhile reading the OWA-EPANET Toolkit API documentation and OWA-EPANET wiki . List of Classes Class Description Workspace A virtual file system where you can store and read files that are consumed by the tool kit Project A single instance of the EN_Project wrapper object and a singleton with all 122 toolkit methods","title":"Overview"},{"location":"api/#overview","text":"epanet-js contains two classes, Workspace & Project. A Workspace represents a virtual file system where you can store and read files that are consumed by the tool kit, such as INP Files or generated by it, such as RPT files or OUT files . A Project is a single instance of the EN_Project wrapper object and a singleton with all 122 toolkit methods attached. A full list of all methods can be found on the wiki. All method names have been converted to camelCase to keep with javascript convention. Create a Project object by instancing the Project class with a Workspace object. import { Project , Workspace } from `epanet-js` const ws = new Workspace () const model = new Project ( ws ) If you are not familiar with the OWA-EPANET Toolkit API or EPANET it is worthwhile reading the OWA-EPANET Toolkit API documentation and OWA-EPANET wiki . List of Classes Class Description Workspace A virtual file system where you can store and read files that are consumed by the tool kit Project A single instance of the EN_Project wrapper object and a singleton with all 122 toolkit methods","title":"Overview"},{"location":"api/project/","text":"Project Class \u00b6 Create a Project object by instancing the epanetJs.Project class with a Workspace object. import { Workspace , Project } from `epanet-js` const ws = new Workspace () const model = new Project ( ws ) Class Methods \u00b6 Functions Description Project Functions These functions are used to manage a project Hydraulic Analysis Functions These functions are used to perform a hydraulic analysis Water Quality Analysis Functions These functions are used to perform a water quality analysis Reporting Functions These functions are used to report simulation results Analysis Options Functions These functions are used to get and set analysis options Network Node Functions These functions are used for working with network nodes Nodal Demand Functions These functions are used for managing nodal demands Network Link Functions These functions are used for working with network links Time Pattern Functions These functions are used for working with time patterns Data Curve Functions These functions are used for working with data curves Simple Control Functions These functions are used for working with simple conditional controls Rule-Based Control Functions These functions are used for working with rule-based controls Project Functions \u00b6 These functions are used to manage a project More... Function Description open Opens an EPANET input file & reads in network data. close Closes a project and frees all of its memory. runProject Runs a complete EPANET simulation. init Initializes an EPANET project. getCount Retrieves the number of objects of a given type in a project. getTitle Retrieves the title lines of the project. setTitle Sets the title lines of the project. saveInpFile Saves a project's data to an EPANET-formatted text file. Hydraulic Analysis Functions \u00b6 These functions are used to perform a hydraulic analysis. More... Function Description solveH Runs a complete hydraulic simulation with results for all time periods written to a temporary hydraulics file. useHydFile Uses a previously saved binary hydraulics file to supply a project's hydraulics. openH Opens a project's hydraulic solver. initH Initializes a network prior to running a hydraulic analysis. runH Computes a hydraulic solution for the current point in time. nextH Determines the length of time until the next hydraulic event occurs in an extended period simulation. saveH Transfers a project's hydraulics results from its temporary hydraulics file to its binary output file, where results are only reported at uniform reporting intervals. saveHydFile Saves a project's temporary hydraulics file to disk. closeH Closes the hydraulic solver freeing all of its allocated memory. Water Quality Analysis Functions \u00b6 These functions are used to perform a water quality analysis. More... Function Description solveQ Runs a complete water quality simulation with results at uniform reporting intervals written to the project's binary output file. openQ Opens a project's water quality solver. initQ Initializes a network prior to running a water quality analysis. runQ Makes hydraulic and water quality results at the start of the current time period available to a project's water quality solver. nextQ Advances a water quality simulation over the time until the next hydraulic event. stepQ Advances a water quality simulation by a single water quality time step. closeQ Closes the water quality solver, freeing all of its allocated memory. Reporting Functions \u00b6 These functions are used to report simulation results. More... Function Description writeLine Writes a line of text to a project's report file. report Writes simulation results in a tabular format to a project's report file. copyReport Copies the current contents of a project's report file to another file. clearReport Clears the contents of a project's report file. resetReport Resets a project's report options to their default values. setReport Processes a reporting format command. setStatusReport Sets the level of hydraulic status reporting. getStatistic Retrieves a particular simulation statistic. getResultIndex Retrieves the order in which a node or link appears in an output file. Analysis Options Functions \u00b6 These functions are used to get and set analysis options. More... Function Description getFlowUnits Retrieves a project's flow units. getOption Retrieves the value of an analysis option. getQualityInfo Gets information about the type of water quality analysis requested. getQualityType Retrieves the type of water quality analysis to be run. getTimeParameter Retrieves the value of a time parameter. setFlowUnits Sets a project's flow units. setOption Sets the value for an anlysis option. setQualityType Sets the type of water quality analysis to run. setTimeParameter Sets the value of a time parameter. Network Node Functions \u00b6 These functions are used for working with network nodes. More... Function Description addNode Adds a new node to a project. deleteNode Deletes a node from a project. getNodeIndex Gets the index of a node given its ID name. getNodeId Gets the ID name of a node given its index. setNodeId Changes the ID name of a node. getNodeType Retrieves a node's type given its index. getNodeValue Retrieves a property value for a node. setNodeValue Sets a property value for a node. setJunctionData Sets a group of properties for a junction node. setTankData Sets a group of properties for a tank node. getCoordinates Gets the (x,y) coordinates of a node. setCoordinates Sets the (x,y) coordinates of a node. Nodal Demand Functions \u00b6 These functions are used for managing nodal demands. More... Function Description addDemand appends a new demand to a junction node demands list. deleteDemand deletes a demand from a junction node. getBaseDemand Gets the base demand for one of a node's demand categories. getDemandIndex Retrieves the index of a node's named demand category. getDemandModel Retrieves the type of demand model in use and its parameters. getDemandName Retrieves the name of a node's demand category. getDemandPattern Retrieves the index of a time pattern assigned to one of a node's demand categories. getNumberOfDemands Retrieves the number of demand categories for a junction node. setBaseDemand Sets the base demand for one of a node's demand categories. setDemandModel Sets the type of demand model to use and its parameters. setDemandName Assigns a name to a node's demand category. setDemandPattern Sets the index of a time pattern used for one of a node's demand categories. Network Link Functions \u00b6 These functions are used for working with network links. More... Function Description addLink Adds a new link to a project. deleteLink Deletes a link from the project. getLinkIndex Gets the index of a link given its ID name. getLinkId Gets the ID name of a link given its index. setLinkId Changes the ID name of a link. getLinkType Retrieves a link's type. setLinkType Changes a link's type. getLinkNodes Gets the indexes of a link's start- and end-nodes. setLinkNodes Sets the indexes of a link's start- and end-nodes. getLinkValue Retrieves a property value for a link. setLinkValue Sets a property value for a link. setPipeData Sets a group of properties for a pipe link. getPumpType Retrieves the type of head curve used by a pump. getHeadCurveIndex Retrieves the curve assigned to a pump's head curve. setHeadCurveIndex Assigns a curve to a pump's head curve. getVertexCount Retrieves the number of internal vertex points assigned to a link. getVertex Retrieves the coordinate's of a vertex point assigned to a link. setVertices Assigns a set of internal vertex points to a link. Time Pattern Functions \u00b6 These functions are used for working with time patterns. More... Function Description addPattern Adds a new time pattern to a project. deletePattern Deletes a time pattern from a project. getPatternIndex Retrieves the index of a time pattern given its ID name. getPatternId Retrieves the ID name of a time pattern given its index. setPatternId Changes the ID name of a time pattern given its index. getPatternLenth Retrieves the number of time periods in a time pattern. getPatternValue Retrieves a time pattern's factor for a given time period. setPatternValue Sets a time pattern's factor for a given time period. getAveragePatternValue Retrieves the average of all pattern factors in a time pattern. setPattern Sets the pattern factors for a given time pattern. Data Curve Functions \u00b6 These functions are used for working with data curves. More... Function Description addCurve Adds a new data curve to a project. deleteCurve Deletes a data curve from a project. getCurveIndex Retrieves the index of a curve given its ID name. getCurveId Retrieves the ID name of a curve given its index. setCurveId Changes the ID name of a data curve given its index. getCurveLenth Retrieves the number of points in a curve. getCurveType Retrieves a curve's type. getCurveValue Retrieves the value of a single data point for a curve. setCurveValue Sets the value of a single data point for a curve. setCurve assigns a set of data points to a curve. Simple Control Functions \u00b6 These functions are used for working with simple conditional controls. More... Function Description addControl Adds a new simple control to a project. deleteControl Deletes an existing simple control. getControl Retrieves the properties of a simple control. setControl Sets the properties of an existing simple control. Rule-Based Control Functions \u00b6 These functions are used for working with rule-based controls. More... Function Description addRule Adds a new rule-based control to a project. deleteRule Deletes an existing rule-based control. getRule Retrieves summary information about a rule-based control. getRuleId Gets the ID name of a rule-based control given its index. getPremise Gets the properties of a premise in a rule-based control. setPremise Sets the properties of a premise in a rule-based control. setPremiseIndex Sets the index of an object in a premise of a rule-based control. setPremiseStatus Sets the status being compared to in a premise of a rule-based control. setPremiseValue Sets the value in a premise of a rule-based control. getThenAction Gets the properties of a THEN action in a rule-based control. setThenAction Sets the properties of a THEN action in a rule-based control. getElseAction Gets the properties of an ELSE action in a rule-based control. setElseAction Sets the properties of an ELSE action in a rule-based control. setRulePriority Sets the priority of a rule-based control.","title":"Project Class"},{"location":"api/project/#project-class","text":"Create a Project object by instancing the epanetJs.Project class with a Workspace object. import { Workspace , Project } from `epanet-js` const ws = new Workspace () const model = new Project ( ws )","title":"Project Class"},{"location":"api/project/#class-methods","text":"Functions Description Project Functions These functions are used to manage a project Hydraulic Analysis Functions These functions are used to perform a hydraulic analysis Water Quality Analysis Functions These functions are used to perform a water quality analysis Reporting Functions These functions are used to report simulation results Analysis Options Functions These functions are used to get and set analysis options Network Node Functions These functions are used for working with network nodes Nodal Demand Functions These functions are used for managing nodal demands Network Link Functions These functions are used for working with network links Time Pattern Functions These functions are used for working with time patterns Data Curve Functions These functions are used for working with data curves Simple Control Functions These functions are used for working with simple conditional controls Rule-Based Control Functions These functions are used for working with rule-based controls","title":"Class Methods"},{"location":"api/project/#project-functions","text":"These functions are used to manage a project More... Function Description open Opens an EPANET input file & reads in network data. close Closes a project and frees all of its memory. runProject Runs a complete EPANET simulation. init Initializes an EPANET project. getCount Retrieves the number of objects of a given type in a project. getTitle Retrieves the title lines of the project. setTitle Sets the title lines of the project. saveInpFile Saves a project's data to an EPANET-formatted text file.","title":"Project Functions"},{"location":"api/project/#hydraulic-analysis-functions","text":"These functions are used to perform a hydraulic analysis. More... Function Description solveH Runs a complete hydraulic simulation with results for all time periods written to a temporary hydraulics file. useHydFile Uses a previously saved binary hydraulics file to supply a project's hydraulics. openH Opens a project's hydraulic solver. initH Initializes a network prior to running a hydraulic analysis. runH Computes a hydraulic solution for the current point in time. nextH Determines the length of time until the next hydraulic event occurs in an extended period simulation. saveH Transfers a project's hydraulics results from its temporary hydraulics file to its binary output file, where results are only reported at uniform reporting intervals. saveHydFile Saves a project's temporary hydraulics file to disk. closeH Closes the hydraulic solver freeing all of its allocated memory.","title":"Hydraulic Analysis Functions"},{"location":"api/project/#water-quality-analysis-functions","text":"These functions are used to perform a water quality analysis. More... Function Description solveQ Runs a complete water quality simulation with results at uniform reporting intervals written to the project's binary output file. openQ Opens a project's water quality solver. initQ Initializes a network prior to running a water quality analysis. runQ Makes hydraulic and water quality results at the start of the current time period available to a project's water quality solver. nextQ Advances a water quality simulation over the time until the next hydraulic event. stepQ Advances a water quality simulation by a single water quality time step. closeQ Closes the water quality solver, freeing all of its allocated memory.","title":"Water Quality Analysis Functions"},{"location":"api/project/#reporting-functions","text":"These functions are used to report simulation results. More... Function Description writeLine Writes a line of text to a project's report file. report Writes simulation results in a tabular format to a project's report file. copyReport Copies the current contents of a project's report file to another file. clearReport Clears the contents of a project's report file. resetReport Resets a project's report options to their default values. setReport Processes a reporting format command. setStatusReport Sets the level of hydraulic status reporting. getStatistic Retrieves a particular simulation statistic. getResultIndex Retrieves the order in which a node or link appears in an output file.","title":"Reporting Functions"},{"location":"api/project/#analysis-options-functions","text":"These functions are used to get and set analysis options. More... Function Description getFlowUnits Retrieves a project's flow units. getOption Retrieves the value of an analysis option. getQualityInfo Gets information about the type of water quality analysis requested. getQualityType Retrieves the type of water quality analysis to be run. getTimeParameter Retrieves the value of a time parameter. setFlowUnits Sets a project's flow units. setOption Sets the value for an anlysis option. setQualityType Sets the type of water quality analysis to run. setTimeParameter Sets the value of a time parameter.","title":"Analysis Options Functions"},{"location":"api/project/#network-node-functions","text":"These functions are used for working with network nodes. More... Function Description addNode Adds a new node to a project. deleteNode Deletes a node from a project. getNodeIndex Gets the index of a node given its ID name. getNodeId Gets the ID name of a node given its index. setNodeId Changes the ID name of a node. getNodeType Retrieves a node's type given its index. getNodeValue Retrieves a property value for a node. setNodeValue Sets a property value for a node. setJunctionData Sets a group of properties for a junction node. setTankData Sets a group of properties for a tank node. getCoordinates Gets the (x,y) coordinates of a node. setCoordinates Sets the (x,y) coordinates of a node.","title":"Network Node Functions"},{"location":"api/project/#nodal-demand-functions","text":"These functions are used for managing nodal demands. More... Function Description addDemand appends a new demand to a junction node demands list. deleteDemand deletes a demand from a junction node. getBaseDemand Gets the base demand for one of a node's demand categories. getDemandIndex Retrieves the index of a node's named demand category. getDemandModel Retrieves the type of demand model in use and its parameters. getDemandName Retrieves the name of a node's demand category. getDemandPattern Retrieves the index of a time pattern assigned to one of a node's demand categories. getNumberOfDemands Retrieves the number of demand categories for a junction node. setBaseDemand Sets the base demand for one of a node's demand categories. setDemandModel Sets the type of demand model to use and its parameters. setDemandName Assigns a name to a node's demand category. setDemandPattern Sets the index of a time pattern used for one of a node's demand categories.","title":"Nodal Demand Functions"},{"location":"api/project/#network-link-functions","text":"These functions are used for working with network links. More... Function Description addLink Adds a new link to a project. deleteLink Deletes a link from the project. getLinkIndex Gets the index of a link given its ID name. getLinkId Gets the ID name of a link given its index. setLinkId Changes the ID name of a link. getLinkType Retrieves a link's type. setLinkType Changes a link's type. getLinkNodes Gets the indexes of a link's start- and end-nodes. setLinkNodes Sets the indexes of a link's start- and end-nodes. getLinkValue Retrieves a property value for a link. setLinkValue Sets a property value for a link. setPipeData Sets a group of properties for a pipe link. getPumpType Retrieves the type of head curve used by a pump. getHeadCurveIndex Retrieves the curve assigned to a pump's head curve. setHeadCurveIndex Assigns a curve to a pump's head curve. getVertexCount Retrieves the number of internal vertex points assigned to a link. getVertex Retrieves the coordinate's of a vertex point assigned to a link. setVertices Assigns a set of internal vertex points to a link.","title":"Network Link Functions"},{"location":"api/project/#time-pattern-functions","text":"These functions are used for working with time patterns. More... Function Description addPattern Adds a new time pattern to a project. deletePattern Deletes a time pattern from a project. getPatternIndex Retrieves the index of a time pattern given its ID name. getPatternId Retrieves the ID name of a time pattern given its index. setPatternId Changes the ID name of a time pattern given its index. getPatternLenth Retrieves the number of time periods in a time pattern. getPatternValue Retrieves a time pattern's factor for a given time period. setPatternValue Sets a time pattern's factor for a given time period. getAveragePatternValue Retrieves the average of all pattern factors in a time pattern. setPattern Sets the pattern factors for a given time pattern.","title":"Time Pattern Functions"},{"location":"api/project/#data-curve-functions","text":"These functions are used for working with data curves. More... Function Description addCurve Adds a new data curve to a project. deleteCurve Deletes a data curve from a project. getCurveIndex Retrieves the index of a curve given its ID name. getCurveId Retrieves the ID name of a curve given its index. setCurveId Changes the ID name of a data curve given its index. getCurveLenth Retrieves the number of points in a curve. getCurveType Retrieves a curve's type. getCurveValue Retrieves the value of a single data point for a curve. setCurveValue Sets the value of a single data point for a curve. setCurve assigns a set of data points to a curve.","title":"Data Curve Functions"},{"location":"api/project/#simple-control-functions","text":"These functions are used for working with simple conditional controls. More... Function Description addControl Adds a new simple control to a project. deleteControl Deletes an existing simple control. getControl Retrieves the properties of a simple control. setControl Sets the properties of an existing simple control.","title":"Simple Control Functions"},{"location":"api/project/#rule-based-control-functions","text":"These functions are used for working with rule-based controls. More... Function Description addRule Adds a new rule-based control to a project. deleteRule Deletes an existing rule-based control. getRule Retrieves summary information about a rule-based control. getRuleId Gets the ID name of a rule-based control given its index. getPremise Gets the properties of a premise in a rule-based control. setPremise Sets the properties of a premise in a rule-based control. setPremiseIndex Sets the index of an object in a premise of a rule-based control. setPremiseStatus Sets the status being compared to in a premise of a rule-based control. setPremiseValue Sets the value in a premise of a rule-based control. getThenAction Gets the properties of a THEN action in a rule-based control. setThenAction Sets the properties of a THEN action in a rule-based control. getElseAction Gets the properties of an ELSE action in a rule-based control. setElseAction Sets the properties of an ELSE action in a rule-based control. setRulePriority Sets the priority of a rule-based control.","title":"Rule-Based Control Functions"},{"location":"api/workspace/","text":"Workspace Class \u00b6 Class Workspace \u00b6 Create a Workspace object by instancing the epanetJs.Workspace class. import { Workspace } from `epanet-js` const ws = new Workspace () Class Methods \u00b6 writeFile ( path : string , data : string | ArrayBufferView ) readFile ( file : string ) : string ; readFile ( file : string , encoding : 'utf8' ) : string ; readFile ( file : string , encoding : 'binary' ) : Uint8Array ;","title":"Workspace Class"},{"location":"api/workspace/#workspace-class","text":"","title":"Workspace Class"},{"location":"api/workspace/#class-workspace","text":"Create a Workspace object by instancing the epanetJs.Workspace class. import { Workspace } from `epanet-js` const ws = new Workspace ()","title":"Class Workspace"},{"location":"api/workspace/#class-methods","text":"writeFile ( path : string , data : string | ArrayBufferView ) readFile ( file : string ) : string ; readFile ( file : string , encoding : 'utf8' ) : string ; readFile ( file : string , encoding : 'binary' ) : Uint8Array ;","title":"Class Methods"},{"location":"api/project-functions/analysis-options/","text":"Analysis Options Functions \u00b6 These functions are used to get and set analysis options. Function Description getFlowUnits Retrieves a project's flow units. getOption Retrieves the value of an analysis option. getQualityInfo Gets information about the type of water quality analysis requested. getQualityType Retrieves the type of water quality analysis to be run. getTimeParameter Retrieves the value of a time parameter. setFlowUnits Sets a project's flow units. setOption Sets the value for an anlysis option. setQualityType Sets the type of water quality analysis to run. setTimeParameter Sets the value of a time parameter. getFlowUnits \u00b6 Retrieves a project's flow units. getFlowUnits () : FlowUnits ; Returns Number a flow units code (see FlowUnits ) Flow units in liters or cubic meters implies that SI metric units are used for all other quantities in addition to flow. Otherwise US Customary units are employed. getOption \u00b6 Retrieves the value of an analysis option. getOption ( option : Option ) : number ; Parameters Parameter Type Description option Option a type of analysis option (see Option ). Returns Number the current value of the option. getQualityInfo \u00b6 Gets information about the type of water quality analysis requested. getQualityInfo () : { qualType : QualityType ; chemName : string ; chemUnits : string ; traceNode : number ; }; Returns Object { qualType : QualityType ; chemName : string ; chemUnits : string ; traceNode : number ; } Property Type Description qualType QualityType type of analysis to run (see QualityType ). chemName string name of chemical constituent. chemUnits string concentration units of the constituent. traceNode number index of the node being traced (if applicable). | getQualityType \u00b6 Retrieves the type of water quality analysis to be run. getQualityType () : { qualType : QualityType ; traceNode : number ; }; Returns Object { qualType : QualityType ; traceNode : number ; } Property Type Description qualType QualityType the type of analysis to run (see QualityType ). traceNode number the index of node being traced, if qualType = QualityType.Trace . getTimeParameter \u00b6 Retrieves the value of a time parameter. getTimeParameter ( param : TimeParameter ) : number ; Parameters Parameter Type Description param TimeParameter a time parameter code (see TimeParameter ). Returns Number the current value of the time parameter (in seconds). setFlowUnits \u00b6 Sets a project's flow units. setFlowUnits ( units : FlowUnits ) : void ; Parameters Parameter Type Description units FlowUnits a flow units code (see FlowUnits ) Flow units in liters or cubic meters implies that SI metric units are used for all other quantities in addition to flow. Otherwise US Customary units are employed. setOption \u00b6 Sets the value for an anlysis option. setOption ( option : Option , value : number ) : void ; Parameters Parameter Type Description option Option a type of analysis option (see Option ). value number the new value assigned to the option. setQualityType \u00b6 Sets the type of water quality analysis to run. setQualityType ( qualType : QualityType , chemName : string , chemUnits : string , traceNode : string ) : void ; Parameters Parameter Type Description qualType QualityType the type of analysis to run (see QualityType ). chemName string the name of the quality constituent. chemUnits string the concentration units of the constituent. traceNode string the ID name of the node being traced if qualType = QualityType.Trace . Chemical name and units can be an empty string if the analysis is not for a chemical. The same holds for the trace node if the analysis is not for source tracing. Note that the trace node is specified by ID name and not by index. setTimeParameter \u00b6 Sets the value of a time parameter. setTimeParameter ( param : TimeParameter , value : number ) : void ; Parameters Parameter Type Description param TimeParameter a time parameter code (see TimeParameter ). value number the new value of the time parameter (in seconds)","title":"Analysis Options"},{"location":"api/project-functions/analysis-options/#analysis-options-functions","text":"These functions are used to get and set analysis options. Function Description getFlowUnits Retrieves a project's flow units. getOption Retrieves the value of an analysis option. getQualityInfo Gets information about the type of water quality analysis requested. getQualityType Retrieves the type of water quality analysis to be run. getTimeParameter Retrieves the value of a time parameter. setFlowUnits Sets a project's flow units. setOption Sets the value for an anlysis option. setQualityType Sets the type of water quality analysis to run. setTimeParameter Sets the value of a time parameter.","title":"Analysis Options Functions"},{"location":"api/project-functions/analysis-options/#getflowunits","text":"Retrieves a project's flow units. getFlowUnits () : FlowUnits ; Returns Number a flow units code (see FlowUnits ) Flow units in liters or cubic meters implies that SI metric units are used for all other quantities in addition to flow. Otherwise US Customary units are employed.","title":"getFlowUnits"},{"location":"api/project-functions/analysis-options/#getoption","text":"Retrieves the value of an analysis option. getOption ( option : Option ) : number ; Parameters Parameter Type Description option Option a type of analysis option (see Option ). Returns Number the current value of the option.","title":"getOption"},{"location":"api/project-functions/analysis-options/#getqualityinfo","text":"Gets information about the type of water quality analysis requested. getQualityInfo () : { qualType : QualityType ; chemName : string ; chemUnits : string ; traceNode : number ; }; Returns Object { qualType : QualityType ; chemName : string ; chemUnits : string ; traceNode : number ; } Property Type Description qualType QualityType type of analysis to run (see QualityType ). chemName string name of chemical constituent. chemUnits string concentration units of the constituent. traceNode number index of the node being traced (if applicable). |","title":"getQualityInfo"},{"location":"api/project-functions/analysis-options/#getqualitytype","text":"Retrieves the type of water quality analysis to be run. getQualityType () : { qualType : QualityType ; traceNode : number ; }; Returns Object { qualType : QualityType ; traceNode : number ; } Property Type Description qualType QualityType the type of analysis to run (see QualityType ). traceNode number the index of node being traced, if qualType = QualityType.Trace .","title":"getQualityType"},{"location":"api/project-functions/analysis-options/#gettimeparameter","text":"Retrieves the value of a time parameter. getTimeParameter ( param : TimeParameter ) : number ; Parameters Parameter Type Description param TimeParameter a time parameter code (see TimeParameter ). Returns Number the current value of the time parameter (in seconds).","title":"getTimeParameter"},{"location":"api/project-functions/analysis-options/#setflowunits","text":"Sets a project's flow units. setFlowUnits ( units : FlowUnits ) : void ; Parameters Parameter Type Description units FlowUnits a flow units code (see FlowUnits ) Flow units in liters or cubic meters implies that SI metric units are used for all other quantities in addition to flow. Otherwise US Customary units are employed.","title":"setFlowUnits"},{"location":"api/project-functions/analysis-options/#setoption","text":"Sets the value for an anlysis option. setOption ( option : Option , value : number ) : void ; Parameters Parameter Type Description option Option a type of analysis option (see Option ). value number the new value assigned to the option.","title":"setOption"},{"location":"api/project-functions/analysis-options/#setqualitytype","text":"Sets the type of water quality analysis to run. setQualityType ( qualType : QualityType , chemName : string , chemUnits : string , traceNode : string ) : void ; Parameters Parameter Type Description qualType QualityType the type of analysis to run (see QualityType ). chemName string the name of the quality constituent. chemUnits string the concentration units of the constituent. traceNode string the ID name of the node being traced if qualType = QualityType.Trace . Chemical name and units can be an empty string if the analysis is not for a chemical. The same holds for the trace node if the analysis is not for source tracing. Note that the trace node is specified by ID name and not by index.","title":"setQualityType"},{"location":"api/project-functions/analysis-options/#settimeparameter","text":"Sets the value of a time parameter. setTimeParameter ( param : TimeParameter , value : number ) : void ; Parameters Parameter Type Description param TimeParameter a time parameter code (see TimeParameter ). value number the new value of the time parameter (in seconds)","title":"setTimeParameter"},{"location":"api/project-functions/data-curve/","text":"Data Curve Functions \u00b6 These functions are used for working with data curves. Function Description addCurve Adds a new data curve to a project. deleteCurve Deletes a data curve from a project. getCurveIndex Retrieves the index of a curve given its ID name. getCurveId Retrieves the ID name of a curve given its index. setCurveId Changes the ID name of a data curve given its index. getCurveLenth Retrieves the number of points in a curve. getCurveType Retrieves a curve's type. getCurveValue Retrieves the value of a single data point for a curve. setCurveValue Sets the value of a single data point for a curve. setCurve assigns a set of data points to a curve. addCurve \u00b6 Adds a new data curve to a project. addCurve ( id : string ) : void ; Parameters Parameter Type Description id string The ID name of the curve to be added. The new curve contains a single data point (1.0, 1.0). deleteCurve \u00b6 Deletes a data curve from a project. deleteCurve ( index : number ) : void ; Parameters Parameter Type Description index number the data curve's index (starting from 1). getCurveIndex \u00b6 Retrieves the index of a curve given its ID name. getCurveIndex ( id : string ) : number ; Parameters Parameter Type Description id string the ID name of a curve. Returns Number The curve's index (starting from 1). getCurveId \u00b6 Retrieves the ID name of a curve given its index. getCurveId ( index : number ) : string ; Parameters Parameter Type Description index number a curve's index (starting from 1). Returns Number the curve's ID name. setCurveId \u00b6 Changes the ID name of a data curve given its index. setCurveId ( index : number , id : string ) : void ; Parameters Parameter Type Description index number a data curve index (starting from 1). id string the data curve's new ID name. getCurveLenth \u00b6 Retrieves the number of points in a curve. getCurveLenth ( index : number ) : number ; Parameters Parameter Type Description index number a curve's index (starting from 1). Returns Number The number of data points assigned to the curve. getCurveType \u00b6 Retrieves a curve's type. getCurveType ( index : number ) : CurveType ; Parameters Parameter Type Description index number a curve's index (starting from 1). Returns CurveType the curve's type (see CurveType ). getCurveValue \u00b6 Retrieves the value of a single data point for a curve. getCurveValue ( curveIndex : number , pointIndex : number ) : { x : number ; y : number ; }; Parameters Parameter Type Description curveIndex number a curve's index (starting from 1). pointIndex number the index of a point on the curve (starting from 1). Returns Object { x : number ; y : number ; } Property Type Description x number the point's x-value. y number the point's y-value. setCurveValue \u00b6 Sets the value of a single data point for a curve. setCurveValue ( curveIndex : number , pointIndex : number , x : number , y : number ) : void ; Parameters Parameter Type Description curveIndex number a curve's index (starting from 1). pointIndex number the index of a point on the curve (starting from 1). x number the point's new x-value. y number the point's new y-value. setCurve \u00b6 Assigns a set of data points to a curve. setCurve ( index : number , xValues : number [], yValues : number []) : void ; Parameters Parameter Type Description index a curve's index (starting from 1). xValues number[] an array of new x-values for the curve. yValues number[] an array of new y-values for the curve. Use this function to redefine (and resize) a curve all at once; use setCurveValue to revise a curve's data points one at a time.","title":"Data Curve"},{"location":"api/project-functions/data-curve/#data-curve-functions","text":"These functions are used for working with data curves. Function Description addCurve Adds a new data curve to a project. deleteCurve Deletes a data curve from a project. getCurveIndex Retrieves the index of a curve given its ID name. getCurveId Retrieves the ID name of a curve given its index. setCurveId Changes the ID name of a data curve given its index. getCurveLenth Retrieves the number of points in a curve. getCurveType Retrieves a curve's type. getCurveValue Retrieves the value of a single data point for a curve. setCurveValue Sets the value of a single data point for a curve. setCurve assigns a set of data points to a curve.","title":"Data Curve Functions"},{"location":"api/project-functions/data-curve/#addcurve","text":"Adds a new data curve to a project. addCurve ( id : string ) : void ; Parameters Parameter Type Description id string The ID name of the curve to be added. The new curve contains a single data point (1.0, 1.0).","title":"addCurve"},{"location":"api/project-functions/data-curve/#deletecurve","text":"Deletes a data curve from a project. deleteCurve ( index : number ) : void ; Parameters Parameter Type Description index number the data curve's index (starting from 1).","title":"deleteCurve"},{"location":"api/project-functions/data-curve/#getcurveindex","text":"Retrieves the index of a curve given its ID name. getCurveIndex ( id : string ) : number ; Parameters Parameter Type Description id string the ID name of a curve. Returns Number The curve's index (starting from 1).","title":"getCurveIndex"},{"location":"api/project-functions/data-curve/#getcurveid","text":"Retrieves the ID name of a curve given its index. getCurveId ( index : number ) : string ; Parameters Parameter Type Description index number a curve's index (starting from 1). Returns Number the curve's ID name.","title":"getCurveId"},{"location":"api/project-functions/data-curve/#setcurveid","text":"Changes the ID name of a data curve given its index. setCurveId ( index : number , id : string ) : void ; Parameters Parameter Type Description index number a data curve index (starting from 1). id string the data curve's new ID name.","title":"setCurveId"},{"location":"api/project-functions/data-curve/#getcurvelenth","text":"Retrieves the number of points in a curve. getCurveLenth ( index : number ) : number ; Parameters Parameter Type Description index number a curve's index (starting from 1). Returns Number The number of data points assigned to the curve.","title":"getCurveLenth"},{"location":"api/project-functions/data-curve/#getcurvetype","text":"Retrieves a curve's type. getCurveType ( index : number ) : CurveType ; Parameters Parameter Type Description index number a curve's index (starting from 1). Returns CurveType the curve's type (see CurveType ).","title":"getCurveType"},{"location":"api/project-functions/data-curve/#getcurvevalue","text":"Retrieves the value of a single data point for a curve. getCurveValue ( curveIndex : number , pointIndex : number ) : { x : number ; y : number ; }; Parameters Parameter Type Description curveIndex number a curve's index (starting from 1). pointIndex number the index of a point on the curve (starting from 1). Returns Object { x : number ; y : number ; } Property Type Description x number the point's x-value. y number the point's y-value.","title":"getCurveValue"},{"location":"api/project-functions/data-curve/#setcurvevalue","text":"Sets the value of a single data point for a curve. setCurveValue ( curveIndex : number , pointIndex : number , x : number , y : number ) : void ; Parameters Parameter Type Description curveIndex number a curve's index (starting from 1). pointIndex number the index of a point on the curve (starting from 1). x number the point's new x-value. y number the point's new y-value.","title":"setCurveValue"},{"location":"api/project-functions/data-curve/#setcurve","text":"Assigns a set of data points to a curve. setCurve ( index : number , xValues : number [], yValues : number []) : void ; Parameters Parameter Type Description index a curve's index (starting from 1). xValues number[] an array of new x-values for the curve. yValues number[] an array of new y-values for the curve. Use this function to redefine (and resize) a curve all at once; use setCurveValue to revise a curve's data points one at a time.","title":"setCurve"},{"location":"api/project-functions/enumerated-types/","text":"Enumerated Types \u00b6 Enumerations Description ActionCodeType Deletion action codes. AnalysisStatistic Analysis convergence statistics. ControlType Simple control types. CountType Types of objects to count. CurveType Types of data curves. DemandModel Demand models. FlowUnits Flow units. HeadLossType Head loss formulas. InitHydOption Hydraulic initialization options. LinkProperty Link properties. LinkStatusType Link status. LinkType Link types. MixingModel Tank mixing models. NodeProperty Node properties. NodeType Node Types. ObjectType Types of network objects. Option Simulation options. PumpStateType Pump states. PumpType Types of pump curves. QualityType Types of water quality analyses. RuleObject Network objects used in rule-based controls. RuleOperator Comparison operators used in rule-based controls. RuleStatus Link status codes used in rule-based controls. RuleVariable Object variables used in rule-based controls. SizeLimits Size Limts. SourceType Water quality source types. StatisticType Reporting statistic choices. StatusReport Status reporting levels. TimeParameter Time parameters. ActionCodeType \u00b6 Deletion action codes. These codes are used in deleteNode and deleteLink to indicate what action should be taken if the node or link being deleted appears in any simple or rule-based controls or if a deleted node has any links connected to it. Enumeration Members Member Value Description Unconditional 0 Delete all controls and connecing links. Conditional 1 Cancel object deletion if it appears in controls or has connecting links. AnalysisStatistic \u00b6 Analysis convergence statistics. These statistics report the convergence criteria for the most current hydraulic analysis and the cumulative water quality mass balance error at the current simulation time. They can be retrieved with getStatistic . Enumeration Members Member Value Description DeficientNodes 5 Number of pressure deficient nodes. DemandReduction 6 % demand reduction at pressure deficient nodes Iterations 0 Number of hydraulic iterations taken. MassBalance 4 Cumulative water quality mass balance ratio. MaxFlowChange 3 Largest flow change in links. MaxHeadError 2 Largest head loss error for links. RelativeError 1 Sum of link flow changes / sum of link flows. ControlType \u00b6 Simple control types. These are the different types of simple (single statement) controls that can be applied to network links. They are used as an argument to addControl , getControl , and setControl . Enumeration Members Member Value Description HiLevel 1 Act when pressure or tank level rises above a setpoint. LowLevel 0 Act when pressure or tank level drops below a setpoint. TimeOfDay 3 Act at a particular time of day. Timer 2 Act at a prescribed elapsed amount of time. CountType \u00b6 Types of objects to count. These options tell getCount which type of object to count. Enumeration Members Member Value Description ControlCount 5 Number of simple controls. CurveCount 4 Number of data curves. LinkCount 2 Number of links (pipes + pumps + valves) NodeCount 0 Number of nodes (junctions + tanks + reservoirs) PatCount 3 Number of time patterns. RuleCount 6 Number of rule-based controls. TankCount 1 Number of tanks and reservoirs. CurveType \u00b6 Types of data curves. These are the different types of physical relationships that a data curve can represent as returned by calling getCurveType . Enumeration Members Member Value Description EfficCurve 2 Pump efficiency v. flow curve. GenericCurve 4 Generic curve. HlossCurve 3 Valve head loss v. flow curve. PumpCurve 1 Pump head v. flow curve. VolumeCurve 0 Tank volume v. depth curve. DemandModel \u00b6 Demand models. These choices for modeling consumer demands are used with getDemandModel and setDemandModel . A demand driven analysis requires that a junction's full demand be supplied in each time period independent of how much pressure is available. A pressure driven analysis makes demand be a power function of pressure, up to the point where the full demand is met. Enumeration Members Member Value Description DDA 0 Demand driven analysis. PDA 1 Pressure driven analysis. FlowUnits \u00b6 Flow units. These choices for flow units are used with getFlowUnits and setFlowUnits . They are also used for the flow units type argument in init . If flow units are expressed in US Customary units ( CFS , GPM , MGD , IMGD , AFD ) then all other quantities are in US Customary units. Otherwise they are in metric units. Enumeration Members Member Value Description AFD 4 Acre-feet per day. CFS 0 Cubic feet per second. CMD 9 Cubic meters per day. CMH 8 Cubic meters per hour. GPM 1 Gallons per minute. IMGD 3 Imperial million gallons per day. LPM 6 Liters per minute. LPS 5 Liters per second. MGD 2 Million gallons per day. MLD 7 Million liters per day. HeadLossType \u00b6 Head loss formulas. The available choices for Option.HeadlossForm in getOption and setOption . They are also used for the head loss type argument in init . Each head loss formula uses a different type of roughness coefficient ( LinkProperty.Roughness ) that can be set with setLinkValue . Enumeration Members Member Value Description CM 2 Chezy-Manning. DW 1 Darcy-Weisbach. HW 0 Hazen-Williams. InitHydOption \u00b6 Hydraulic initialization options. These options are used to initialize a new hydraulic analysis when initH is called. Enumeration Members Member Value Description InitFlow 10 Don't save hydraulics; re-initialize flows. NoSave 0 Don't save hydraulics; don't re-initialize flows. Save 1 Save hydraulics to file, don't re-initialize flows. SaveAndInit 11 Save hydraulics; re-initialize flows. LinkProperty \u00b6 Link properties. These link properties are used with getLinkValue and setLinkValue . Those marked as read only are computed values that can only be retrieved. Enumeration Members Member Value Description Diameter 0 Pipe/valve diameter. Energy 13 Current computed pump energy usage (read only) Flow 8 Current computed flow rate (read only) Headloss 10 Current computed head loss (read only) InitSetting 5 Initial pump speed or valve setting. InitStatus 4 Initial status (see LinkStatusType ) KBulk 6 Bulk chemical reaction coefficient. KWall 7 Pipe wall chemical reaction coefficient. Length 1 Pipe length. LinkPattern 15 Pump speed time pattern index. LinkQual 14 Current computed link quality (read only) MinorLoss 3 Pipe/valve minor loss coefficient. PumpECost 21 Pump average energy price. PumpECurve 20 Pump efficiency v. flow curve index. PumpEffic 17 Current computed pump efficiency (read only) PumpEPat 22 Pump energy price time pattern index. PumpHCurve 19 Pump head v. flow curve index. PumpPower 18 Pump constant power rating. PumpState 16 Current computed pump state (read only) (see PumpStateType ) Roughness 2 Pipe roughness coefficient. Setting 12 Current link setting. Status 11 Current link status (see LinkStatusType ) Velocity 9 Current computed flow velocity (read only) LinkStatusType \u00b6 Link status. One of these values is returned when getLinkValue is used to retrieve a link's initial status ( LinkProperty.InitStatus ) or its current status ( LinkProperty.Status ). These options are also used with setLinkValue to set values for these same properties. Enumeration Members Member Value Description Closed 0 Open 1 LinkType \u00b6 Link types. These are the different types of links that can be returned by calling getLinkType . Enumeration Members Member Value Description CVPipe 0 Pipe with check valve. FCV 6 Flow control valve. GPV 8 General purpose valve. PBV 5 Pressure breaker valve. Pipe 1 Pipe. PRV 3 Pressure reducing valve. PSV 4 Pressure sustaining valve. Pump 2 Pump. TCV 7 Throttle control valve. MixingModel \u00b6 Tank mixing models. These are the different types of models that describe water quality mixing in storage tanks. The choice of model is accessed with NodeProperty.MixModel property of a Tank node using getNodeValue and setNodeValue . Enumeration Members Member Value Description FIFO 2 First in, first out model. LIFO 3 Last in, first out model. Mix1 0 Complete mix model. Mix2 1 2-compartment model NodeProperty \u00b6 Node properties. These node properties are used with getNodeValue and setNodeValue . Those marked as read only are computed values that can only be retrieved. Enumeration Members Member Value Description BaseDemand 1 Primary demand baseline value. CanOverFlow 26 Tank can overflow (= 1) or not (= 0) Demand 9 Current computed demand (read only) DemandDeficit 27 Amount that full demand is reduced under PDA (read only) Elevation 0 Elevation. Emitter 3 Emitter flow coefficient. Head 10 Current computed hydraulic head (read only) Initqual 4 Initial quality. InitVolume 14 Tank initial volume (read only) MaxLevel 21 Tank maximum level. MaxVolume 25 Tank maximum volume (read only) MinLevel 20 Tank minimum level. MinVolume 18 Tank minimum volume. MixFraction 22 Tank mixing fraction. MixModel 15 Tank mixing model (see MixingModel ) MixZoneVol 16 Tank mixing zone volume (read only) Pattern 2 Primary demand time pattern index. Pressure 11 Current computed pressure (read only) Quality 12 Current computed quality (read only) SourceMass 13 Current computed quality source mass inflow (read only) SourcePat 6 Quality source pattern index. SourceQual 5 Quality source strength. SourceType 7 Quality source type (see SourceType ) TankDiam 17 Tank diameter. TankKBulk 23 Tank bulk decay coefficient. TankLevel 8 Current computed tank water level (read only) TankVolume 24 Current computed tank volume (read only) VolCurve 19 Tank volume curve index. NodeType \u00b6 Node Types. These are the different types of nodes that can be returned by calling getNodeType . Enumeration Members Member Value Description Junction 0 Junction node. Reservoir 1 Reservoir node. Tank 2 Storage tank node. ObjectType \u00b6 Types of network objects. The types of objects that comprise a network model. Enumeration Members Member Value Description Control 4 Simple controls. Curve 3 Data curves. Link 1 Links. Node 0 Nodes. Rule 5 Control rules. TimePat 2 Time patterns. Option \u00b6 Simulation options. These constants identify the hydraulic and water quality simulation options that are applied on a network-wide basis. They are accessed using the getOption and setOption functions. Enumeration Members Member Value Description Accuracy 1 Total normalized flow change for hydraulic convergence. BulkOrder 19 Bulk water reaction order for pipes. CheckFreq 15 Frequency of hydraulic status checks. ConcenLimit 22 Limiting concentration for growth reactions. DampLimit 17 Accuracy level where solution damping begins. DemandCharge 11 Energy charge per max. KW usage. DemandMult 4 Global demand multiplier. Emitexpon 3 Exponent in emitter discharge formula. FlowChange 6 Maximum flow change for hydraulic convergence. GlobalEffic 8 Global pump efficiency (percent) GlobalPattern 10 Index of a global energy price pattern. GlobalPrice 9 Global energy price per KWH. HeadError 5 Maximum head loss error for hydraulic convergence. HeadlossForm 7 Head loss formula (see HeadLossType ) MaxCheck 16 Maximum trials for status checking. SpDiffus 18 Specific diffusivity (relative to chlorine at 20 deg C) SpGravity 12 Specific gravity. SpViscos 13 Specific viscosity (relative to water at 20 deg C) TankOrder 21 Bulk water reaction order for tanks. Tolerance 2 Water quality tolerance. Trials 0 Maximum trials allowed for hydraulic convergence. Unbalanced 14 Extra trials allowed if hydraulics don't converge. WallOrder 20 Wall reaction order for pipes (either 0 or 1) PumpStateType \u00b6 Pump states. One of these codes is returned when getLinkValue is used to retrieve a pump's current operating state ( LinkProperty.PumpState ). PumpXHead indicates that the pump has been shut down because it is being asked to deliver more than its shutoff head. PumpXFlow indicates that the pump is being asked to deliver more than its maximum flow. Enumeration Members Member Value Description PumpClosed 2 Pump closed. PumpOpen 3 Pump open. PumpXFlow 5 Pump open - cannot supply flow. PumpXHead 0 Pump closed - cannot supply head. PumpType \u00b6 Types of pump curves. getPumpType returns one of these values when it is called. Enumeration Members Member Value Description ConstHP 0 Constant horsepower. Custom 2 User-defined custom curve. NoCurve 3 No curve. PowerFunc 1 Power function. QualityType \u00b6 Types of water quality analyses. These are the different types of water quality analyses that EPANET can run. They are used with getQualityInfo , getQualityType , and setQualityType . Enumeration Members Member Value Description Age 2 Water age analysis. Chem 1 Chemical fate and transport. None 0 No quality analysis. Trace 3 Source tracing analysis. RuleObject \u00b6 Network objects used in rule-based controls. Enumeration Members Member Value Description Link 7 Clause refers to a link. Node 6 Clause refers to a node. System 8 Clause refers to a system parameter (e.g., time) RuleOperator \u00b6 Comparison operators used in rule-based controls. Enumeration Members Member Value Description Above 9 Is above. Below 8 Is below. EqualTo 0 Equal to. GreaterOrEqualTo 3 Greater than or equal to. GreaterThan 5 Greater than. Is 6 Is equal to. LessOrEqualTo 2 Less than or equal to. LessThan 4 Less than. Not 7 Is not equal to. NotEqualTo 1 Not equal. RuleStatus \u00b6 Link status codes used in rule-based controls. Enumeration Members Member Value Description IsActive 3 Control valve is active. IsClosed 2 Link is closed. IsOpen 1 Link is open. RuleVariable \u00b6 Object variables used in rule-based controls. Enumeration Members Member Value Description ClockTime 10 Time of day. Demand 0 Nodal demand. DrainTime 12 Time to drain a tank. FillTime 11 Time to fill a tank. Flow 5 Link flow rate. Grade 2 Nodal hydraulic grade. Head 1 Nodal hydraulic head. Level 3 Tank water level. Power 8 Pump power output. Pressure 4 Nodal pressure. Setting 7 Link setting. Status 6 Link status. Time 9 Elapsed simulation time. SizeLimits \u00b6 Size Limts. Limits on the size of character arrays used to store ID names and text messages. Enumeration Members Member Value Description MaxId 31 Max. # characters in ID name. MaxMsg 255 Max. # characters in message text. SourceType \u00b6 Water quality source types. These are the different types of external water quality sources that can be assigned to a node's property ( see NodeProperty.SourceType ) and as used by getNodeValue and setNodeValue . Enumeration Members Member Value Description Concen 0 Sets the concentration of external inflow entering a node. FlowPaced 3 Adds a given value to the concentration leaving a node. Mass 1 Injects a given mass/minute into a node. SetPoint 2 Sets the concentration leaving a node to a given value. StatisticType \u00b6 Reporting statistic choices. These options determine what kind of statistical post-processing should be done on the time series of simulation results generated before they are reported using report . An option can be chosen by using Statistic option as the argument to setReport . Enumeration Members Member Value Description Average 1 Report average value over simulation period. Maximum 3 Report maximum value over simulation period. Minimum 2 Report minimum value over simulation period. Range 4 Report maximum - minimum over simulation period. Series 0 Report all time series points. StatusReport \u00b6 Status reporting levels. These choices specify the level of status reporting written to a project's report file during a hydraulic analysis. The level is set using the setStatusReport function. Enumeration Members Member Value Description FullReport 2 Full level of status reporting. NoReport 0 No status reporting. NormalReport 1 Normal level of status reporting. TimeParameter \u00b6 Time parameters. These time-related options are used with getTimeParameter and setTimeParameter . All times are expressed in seconds The parameters marked as read only are computed values that can only be retrieved. Enumeration Members Member Value Description Duration 0 Total simulation duration. HaltFlag 13 Flag indicating if the simulation was halted (read only) HTime 11 Elapsed time of current hydraulic solution (read only) HydStep 1 Hydraulic time step. NextEvent 14 Shortest time until a tank becomes empty or full (read only) NextEventTank 15 Index of tank with shortest time to become empty or full (read only) PatternStart 4 Time when time patterns begin. PatternStep 3 Time pattern period. Periods 9 Number of reporting time periods (read only) QTime 12 Elapsed time of current quality solution (read only) QualStep 2 Water quality time step. ReportStart 6 Time when reporting starts. ReportStep 5 Reporting time step. RuleStep 7 Rule-based control evaluation time step. StartTime 10 Simulation starting time of day. Statistic 8 Reporting statistic code (see StatisticType )","title":"Enumerated Types"},{"location":"api/project-functions/enumerated-types/#enumerated-types","text":"Enumerations Description ActionCodeType Deletion action codes. AnalysisStatistic Analysis convergence statistics. ControlType Simple control types. CountType Types of objects to count. CurveType Types of data curves. DemandModel Demand models. FlowUnits Flow units. HeadLossType Head loss formulas. InitHydOption Hydraulic initialization options. LinkProperty Link properties. LinkStatusType Link status. LinkType Link types. MixingModel Tank mixing models. NodeProperty Node properties. NodeType Node Types. ObjectType Types of network objects. Option Simulation options. PumpStateType Pump states. PumpType Types of pump curves. QualityType Types of water quality analyses. RuleObject Network objects used in rule-based controls. RuleOperator Comparison operators used in rule-based controls. RuleStatus Link status codes used in rule-based controls. RuleVariable Object variables used in rule-based controls. SizeLimits Size Limts. SourceType Water quality source types. StatisticType Reporting statistic choices. StatusReport Status reporting levels. TimeParameter Time parameters.","title":"Enumerated Types"},{"location":"api/project-functions/enumerated-types/#actioncodetype","text":"Deletion action codes. These codes are used in deleteNode and deleteLink to indicate what action should be taken if the node or link being deleted appears in any simple or rule-based controls or if a deleted node has any links connected to it. Enumeration Members Member Value Description Unconditional 0 Delete all controls and connecing links. Conditional 1 Cancel object deletion if it appears in controls or has connecting links.","title":"ActionCodeType"},{"location":"api/project-functions/enumerated-types/#analysisstatistic","text":"Analysis convergence statistics. These statistics report the convergence criteria for the most current hydraulic analysis and the cumulative water quality mass balance error at the current simulation time. They can be retrieved with getStatistic . Enumeration Members Member Value Description DeficientNodes 5 Number of pressure deficient nodes. DemandReduction 6 % demand reduction at pressure deficient nodes Iterations 0 Number of hydraulic iterations taken. MassBalance 4 Cumulative water quality mass balance ratio. MaxFlowChange 3 Largest flow change in links. MaxHeadError 2 Largest head loss error for links. RelativeError 1 Sum of link flow changes / sum of link flows.","title":"AnalysisStatistic"},{"location":"api/project-functions/enumerated-types/#controltype","text":"Simple control types. These are the different types of simple (single statement) controls that can be applied to network links. They are used as an argument to addControl , getControl , and setControl . Enumeration Members Member Value Description HiLevel 1 Act when pressure or tank level rises above a setpoint. LowLevel 0 Act when pressure or tank level drops below a setpoint. TimeOfDay 3 Act at a particular time of day. Timer 2 Act at a prescribed elapsed amount of time.","title":"ControlType"},{"location":"api/project-functions/enumerated-types/#counttype","text":"Types of objects to count. These options tell getCount which type of object to count. Enumeration Members Member Value Description ControlCount 5 Number of simple controls. CurveCount 4 Number of data curves. LinkCount 2 Number of links (pipes + pumps + valves) NodeCount 0 Number of nodes (junctions + tanks + reservoirs) PatCount 3 Number of time patterns. RuleCount 6 Number of rule-based controls. TankCount 1 Number of tanks and reservoirs.","title":"CountType"},{"location":"api/project-functions/enumerated-types/#curvetype","text":"Types of data curves. These are the different types of physical relationships that a data curve can represent as returned by calling getCurveType . Enumeration Members Member Value Description EfficCurve 2 Pump efficiency v. flow curve. GenericCurve 4 Generic curve. HlossCurve 3 Valve head loss v. flow curve. PumpCurve 1 Pump head v. flow curve. VolumeCurve 0 Tank volume v. depth curve.","title":"CurveType"},{"location":"api/project-functions/enumerated-types/#demandmodel","text":"Demand models. These choices for modeling consumer demands are used with getDemandModel and setDemandModel . A demand driven analysis requires that a junction's full demand be supplied in each time period independent of how much pressure is available. A pressure driven analysis makes demand be a power function of pressure, up to the point where the full demand is met. Enumeration Members Member Value Description DDA 0 Demand driven analysis. PDA 1 Pressure driven analysis.","title":"DemandModel"},{"location":"api/project-functions/enumerated-types/#flowunits","text":"Flow units. These choices for flow units are used with getFlowUnits and setFlowUnits . They are also used for the flow units type argument in init . If flow units are expressed in US Customary units ( CFS , GPM , MGD , IMGD , AFD ) then all other quantities are in US Customary units. Otherwise they are in metric units. Enumeration Members Member Value Description AFD 4 Acre-feet per day. CFS 0 Cubic feet per second. CMD 9 Cubic meters per day. CMH 8 Cubic meters per hour. GPM 1 Gallons per minute. IMGD 3 Imperial million gallons per day. LPM 6 Liters per minute. LPS 5 Liters per second. MGD 2 Million gallons per day. MLD 7 Million liters per day.","title":"FlowUnits"},{"location":"api/project-functions/enumerated-types/#headlosstype","text":"Head loss formulas. The available choices for Option.HeadlossForm in getOption and setOption . They are also used for the head loss type argument in init . Each head loss formula uses a different type of roughness coefficient ( LinkProperty.Roughness ) that can be set with setLinkValue . Enumeration Members Member Value Description CM 2 Chezy-Manning. DW 1 Darcy-Weisbach. HW 0 Hazen-Williams.","title":"HeadLossType"},{"location":"api/project-functions/enumerated-types/#inithydoption","text":"Hydraulic initialization options. These options are used to initialize a new hydraulic analysis when initH is called. Enumeration Members Member Value Description InitFlow 10 Don't save hydraulics; re-initialize flows. NoSave 0 Don't save hydraulics; don't re-initialize flows. Save 1 Save hydraulics to file, don't re-initialize flows. SaveAndInit 11 Save hydraulics; re-initialize flows.","title":"InitHydOption"},{"location":"api/project-functions/enumerated-types/#linkproperty","text":"Link properties. These link properties are used with getLinkValue and setLinkValue . Those marked as read only are computed values that can only be retrieved. Enumeration Members Member Value Description Diameter 0 Pipe/valve diameter. Energy 13 Current computed pump energy usage (read only) Flow 8 Current computed flow rate (read only) Headloss 10 Current computed head loss (read only) InitSetting 5 Initial pump speed or valve setting. InitStatus 4 Initial status (see LinkStatusType ) KBulk 6 Bulk chemical reaction coefficient. KWall 7 Pipe wall chemical reaction coefficient. Length 1 Pipe length. LinkPattern 15 Pump speed time pattern index. LinkQual 14 Current computed link quality (read only) MinorLoss 3 Pipe/valve minor loss coefficient. PumpECost 21 Pump average energy price. PumpECurve 20 Pump efficiency v. flow curve index. PumpEffic 17 Current computed pump efficiency (read only) PumpEPat 22 Pump energy price time pattern index. PumpHCurve 19 Pump head v. flow curve index. PumpPower 18 Pump constant power rating. PumpState 16 Current computed pump state (read only) (see PumpStateType ) Roughness 2 Pipe roughness coefficient. Setting 12 Current link setting. Status 11 Current link status (see LinkStatusType ) Velocity 9 Current computed flow velocity (read only)","title":"LinkProperty"},{"location":"api/project-functions/enumerated-types/#linkstatustype","text":"Link status. One of these values is returned when getLinkValue is used to retrieve a link's initial status ( LinkProperty.InitStatus ) or its current status ( LinkProperty.Status ). These options are also used with setLinkValue to set values for these same properties. Enumeration Members Member Value Description Closed 0 Open 1","title":"LinkStatusType"},{"location":"api/project-functions/enumerated-types/#linktype","text":"Link types. These are the different types of links that can be returned by calling getLinkType . Enumeration Members Member Value Description CVPipe 0 Pipe with check valve. FCV 6 Flow control valve. GPV 8 General purpose valve. PBV 5 Pressure breaker valve. Pipe 1 Pipe. PRV 3 Pressure reducing valve. PSV 4 Pressure sustaining valve. Pump 2 Pump. TCV 7 Throttle control valve.","title":"LinkType"},{"location":"api/project-functions/enumerated-types/#mixingmodel","text":"Tank mixing models. These are the different types of models that describe water quality mixing in storage tanks. The choice of model is accessed with NodeProperty.MixModel property of a Tank node using getNodeValue and setNodeValue . Enumeration Members Member Value Description FIFO 2 First in, first out model. LIFO 3 Last in, first out model. Mix1 0 Complete mix model. Mix2 1 2-compartment model","title":"MixingModel"},{"location":"api/project-functions/enumerated-types/#nodeproperty","text":"Node properties. These node properties are used with getNodeValue and setNodeValue . Those marked as read only are computed values that can only be retrieved. Enumeration Members Member Value Description BaseDemand 1 Primary demand baseline value. CanOverFlow 26 Tank can overflow (= 1) or not (= 0) Demand 9 Current computed demand (read only) DemandDeficit 27 Amount that full demand is reduced under PDA (read only) Elevation 0 Elevation. Emitter 3 Emitter flow coefficient. Head 10 Current computed hydraulic head (read only) Initqual 4 Initial quality. InitVolume 14 Tank initial volume (read only) MaxLevel 21 Tank maximum level. MaxVolume 25 Tank maximum volume (read only) MinLevel 20 Tank minimum level. MinVolume 18 Tank minimum volume. MixFraction 22 Tank mixing fraction. MixModel 15 Tank mixing model (see MixingModel ) MixZoneVol 16 Tank mixing zone volume (read only) Pattern 2 Primary demand time pattern index. Pressure 11 Current computed pressure (read only) Quality 12 Current computed quality (read only) SourceMass 13 Current computed quality source mass inflow (read only) SourcePat 6 Quality source pattern index. SourceQual 5 Quality source strength. SourceType 7 Quality source type (see SourceType ) TankDiam 17 Tank diameter. TankKBulk 23 Tank bulk decay coefficient. TankLevel 8 Current computed tank water level (read only) TankVolume 24 Current computed tank volume (read only) VolCurve 19 Tank volume curve index.","title":"NodeProperty"},{"location":"api/project-functions/enumerated-types/#nodetype","text":"Node Types. These are the different types of nodes that can be returned by calling getNodeType . Enumeration Members Member Value Description Junction 0 Junction node. Reservoir 1 Reservoir node. Tank 2 Storage tank node.","title":"NodeType"},{"location":"api/project-functions/enumerated-types/#objecttype","text":"Types of network objects. The types of objects that comprise a network model. Enumeration Members Member Value Description Control 4 Simple controls. Curve 3 Data curves. Link 1 Links. Node 0 Nodes. Rule 5 Control rules. TimePat 2 Time patterns.","title":"ObjectType"},{"location":"api/project-functions/enumerated-types/#option","text":"Simulation options. These constants identify the hydraulic and water quality simulation options that are applied on a network-wide basis. They are accessed using the getOption and setOption functions. Enumeration Members Member Value Description Accuracy 1 Total normalized flow change for hydraulic convergence. BulkOrder 19 Bulk water reaction order for pipes. CheckFreq 15 Frequency of hydraulic status checks. ConcenLimit 22 Limiting concentration for growth reactions. DampLimit 17 Accuracy level where solution damping begins. DemandCharge 11 Energy charge per max. KW usage. DemandMult 4 Global demand multiplier. Emitexpon 3 Exponent in emitter discharge formula. FlowChange 6 Maximum flow change for hydraulic convergence. GlobalEffic 8 Global pump efficiency (percent) GlobalPattern 10 Index of a global energy price pattern. GlobalPrice 9 Global energy price per KWH. HeadError 5 Maximum head loss error for hydraulic convergence. HeadlossForm 7 Head loss formula (see HeadLossType ) MaxCheck 16 Maximum trials for status checking. SpDiffus 18 Specific diffusivity (relative to chlorine at 20 deg C) SpGravity 12 Specific gravity. SpViscos 13 Specific viscosity (relative to water at 20 deg C) TankOrder 21 Bulk water reaction order for tanks. Tolerance 2 Water quality tolerance. Trials 0 Maximum trials allowed for hydraulic convergence. Unbalanced 14 Extra trials allowed if hydraulics don't converge. WallOrder 20 Wall reaction order for pipes (either 0 or 1)","title":"Option"},{"location":"api/project-functions/enumerated-types/#pumpstatetype","text":"Pump states. One of these codes is returned when getLinkValue is used to retrieve a pump's current operating state ( LinkProperty.PumpState ). PumpXHead indicates that the pump has been shut down because it is being asked to deliver more than its shutoff head. PumpXFlow indicates that the pump is being asked to deliver more than its maximum flow. Enumeration Members Member Value Description PumpClosed 2 Pump closed. PumpOpen 3 Pump open. PumpXFlow 5 Pump open - cannot supply flow. PumpXHead 0 Pump closed - cannot supply head.","title":"PumpStateType"},{"location":"api/project-functions/enumerated-types/#pumptype","text":"Types of pump curves. getPumpType returns one of these values when it is called. Enumeration Members Member Value Description ConstHP 0 Constant horsepower. Custom 2 User-defined custom curve. NoCurve 3 No curve. PowerFunc 1 Power function.","title":"PumpType"},{"location":"api/project-functions/enumerated-types/#qualitytype","text":"Types of water quality analyses. These are the different types of water quality analyses that EPANET can run. They are used with getQualityInfo , getQualityType , and setQualityType . Enumeration Members Member Value Description Age 2 Water age analysis. Chem 1 Chemical fate and transport. None 0 No quality analysis. Trace 3 Source tracing analysis.","title":"QualityType"},{"location":"api/project-functions/enumerated-types/#ruleobject","text":"Network objects used in rule-based controls. Enumeration Members Member Value Description Link 7 Clause refers to a link. Node 6 Clause refers to a node. System 8 Clause refers to a system parameter (e.g., time)","title":"RuleObject"},{"location":"api/project-functions/enumerated-types/#ruleoperator","text":"Comparison operators used in rule-based controls. Enumeration Members Member Value Description Above 9 Is above. Below 8 Is below. EqualTo 0 Equal to. GreaterOrEqualTo 3 Greater than or equal to. GreaterThan 5 Greater than. Is 6 Is equal to. LessOrEqualTo 2 Less than or equal to. LessThan 4 Less than. Not 7 Is not equal to. NotEqualTo 1 Not equal.","title":"RuleOperator"},{"location":"api/project-functions/enumerated-types/#rulestatus","text":"Link status codes used in rule-based controls. Enumeration Members Member Value Description IsActive 3 Control valve is active. IsClosed 2 Link is closed. IsOpen 1 Link is open.","title":"RuleStatus"},{"location":"api/project-functions/enumerated-types/#rulevariable","text":"Object variables used in rule-based controls. Enumeration Members Member Value Description ClockTime 10 Time of day. Demand 0 Nodal demand. DrainTime 12 Time to drain a tank. FillTime 11 Time to fill a tank. Flow 5 Link flow rate. Grade 2 Nodal hydraulic grade. Head 1 Nodal hydraulic head. Level 3 Tank water level. Power 8 Pump power output. Pressure 4 Nodal pressure. Setting 7 Link setting. Status 6 Link status. Time 9 Elapsed simulation time.","title":"RuleVariable"},{"location":"api/project-functions/enumerated-types/#sizelimits","text":"Size Limts. Limits on the size of character arrays used to store ID names and text messages. Enumeration Members Member Value Description MaxId 31 Max. # characters in ID name. MaxMsg 255 Max. # characters in message text.","title":"SizeLimits"},{"location":"api/project-functions/enumerated-types/#sourcetype","text":"Water quality source types. These are the different types of external water quality sources that can be assigned to a node's property ( see NodeProperty.SourceType ) and as used by getNodeValue and setNodeValue . Enumeration Members Member Value Description Concen 0 Sets the concentration of external inflow entering a node. FlowPaced 3 Adds a given value to the concentration leaving a node. Mass 1 Injects a given mass/minute into a node. SetPoint 2 Sets the concentration leaving a node to a given value.","title":"SourceType"},{"location":"api/project-functions/enumerated-types/#statistictype","text":"Reporting statistic choices. These options determine what kind of statistical post-processing should be done on the time series of simulation results generated before they are reported using report . An option can be chosen by using Statistic option as the argument to setReport . Enumeration Members Member Value Description Average 1 Report average value over simulation period. Maximum 3 Report maximum value over simulation period. Minimum 2 Report minimum value over simulation period. Range 4 Report maximum - minimum over simulation period. Series 0 Report all time series points.","title":"StatisticType"},{"location":"api/project-functions/enumerated-types/#statusreport","text":"Status reporting levels. These choices specify the level of status reporting written to a project's report file during a hydraulic analysis. The level is set using the setStatusReport function. Enumeration Members Member Value Description FullReport 2 Full level of status reporting. NoReport 0 No status reporting. NormalReport 1 Normal level of status reporting.","title":"StatusReport"},{"location":"api/project-functions/enumerated-types/#timeparameter","text":"Time parameters. These time-related options are used with getTimeParameter and setTimeParameter . All times are expressed in seconds The parameters marked as read only are computed values that can only be retrieved. Enumeration Members Member Value Description Duration 0 Total simulation duration. HaltFlag 13 Flag indicating if the simulation was halted (read only) HTime 11 Elapsed time of current hydraulic solution (read only) HydStep 1 Hydraulic time step. NextEvent 14 Shortest time until a tank becomes empty or full (read only) NextEventTank 15 Index of tank with shortest time to become empty or full (read only) PatternStart 4 Time when time patterns begin. PatternStep 3 Time pattern period. Periods 9 Number of reporting time periods (read only) QTime 12 Elapsed time of current quality solution (read only) QualStep 2 Water quality time step. ReportStart 6 Time when reporting starts. ReportStep 5 Reporting time step. RuleStep 7 Rule-based control evaluation time step. StartTime 10 Simulation starting time of day. Statistic 8 Reporting statistic code (see StatisticType )","title":"TimeParameter"},{"location":"api/project-functions/hydraulic-analysis/","text":"Hydraulic Analysis Functions \u00b6 These functions are used to perform a hydraulic analysis. Function Description solveH Runs a complete hydraulic simulation with results for all time periods written to a temporary hydraulics file. useHydFile Uses a previously saved binary hydraulics file to supply a project's hydraulics. openH Opens a project's hydraulic solver. initH Initializes a network prior to running a hydraulic analysis. runH Computes a hydraulic solution for the current point in time. nextH Determines the length of time until the next hydraulic event occurs in an extended period simulation. saveH Transfers a project's hydraulics results from its temporary hydraulics file to its binary output file, where results are only reported at uniform reporting intervals. saveHydFile Saves a project's temporary hydraulics file to disk. closeH Closes the hydraulic solver freeing all of its allocated memory. solveH \u00b6 Runs a complete hydraulic simulation with results for all time periods written to a temporary hydraulics file. solveH () : void Use solveH to generate a complete hydraulic solution which can stand alone or be used as input to a water quality analysis. This function will not allow one to examine intermediate hydraulic results as they are generated. It can also be followed by calls to saveH and report to write hydraulic results to the report file. The sequence openH - initH - runH - nextH - closeH can be used instead to gain access to results at intermediate time periods and directly adjust link status and control settings as a simulation proceeds. useHydFile \u00b6 Uses a previously saved binary hydraulics file to supply a project's hydraulics. useHydFile ( filename : string ) : void Parameters Parameter Type Description filename String the name of the binary file containing hydraulic results. Call this function to re-use a set of hydraulic analysis results saved previously. This can save computational time if water quality analyses are being made under the same set of hydraulic conditions. Do not call this function while the hydraulics solver is open. openH \u00b6 Opens a project's hydraulic solver. openH () : void Call openH prior to running the first hydraulic analysis using the initH - runH - nextH sequence. Multiple analyses can be made before calling closeH to close the hydraulic solver. Do not call this function if solveH is being used to run a complete hydraulic analysis or if hydraulics are being supplied by a previously saved hydraulics file using useHydFile . initH \u00b6 Initializes a network prior to running a hydraulic analysis. initH ( initFlag : InitHydOption ) : void Parameters Parameter Type Description initFlag InitHydOption a 2-digit initialization flag (see InitHydOption ). This function initializes storage tank levels, link status and settings, and the simulation time clock prior to running a hydraulic analysis. The initialization flag is a two digit number where the 1st (left) digit indicates if link flows should be re-initialized (1) or not (0), and the 2nd digit indicates if hydraulic results should be saved to a temporary binary hydraulics file (1) or not (0). Be sure to call initH prior to running a hydraulic analysis using a runH - nextH loop. Choose to save hydraulics results if you will be: making a subsequent water quality run, using report to generate a report using saveHydFile to save the binary hydraulics file. There is no need to save hydraulics if you will be writing custom code to process hydraulic results as they are generated using the functions getNodeValue and getLinkValue . runH \u00b6 Computes a hydraulic solution for the current point in time. runH () : Number Returns Number The current simulation time in seconds. This function is used in a loop with nextH to run an extended period hydraulic simulation. initH must have been called prior to running the runH - nextH loop. nextH \u00b6 Determines the length of time until the next hydraulic event occurs in an extended period simulation. nextH () : Number Returns Number The time (in seconds) until the next hydraulic event or 0 if at the end of the full simulation duration. This function is used in a loop with runH to run an extended period hydraulic simulation. The return value is automatically computed as the smaller of: the time interval until the next hydraulic time step begins the time interval until the next reporting time step begins the time interval until the next change in demands occurs the time interval until a tank becomes full or empty the time interval until a control or rule fires. saveH \u00b6 Transfers a project's hydraulics results from its temporary hydraulics file to its binary output file, where results are only reported at uniform reporting intervals. saveH () : void saveH is used when only a hydraulic analysis is run and results at uniform reporting intervals need to be transferred to a project's binary output file. Such would be the case when results are to be written in formatted fashion to the project's report file using report . saveHydFile \u00b6 Saves a project's temporary hydraulics file to disk. saveHydFile ( filename : String ) : void Parameters Parameter Type Description filename String the name of the file to be created. Use this function to save the current set of hydraulics results to a file, either for post-processing or to be used at a later time by calling the useHydFile function. The hydraulics file contains nodal demands and heads and link flows, status, and settings for all hydraulic time steps, even intermediate ones. Before calling this function hydraulic results must have been generated and saved by having called solveH or the initH - runH - nextH sequence with the initflag argument of initH set to InitHydOption.Save or InitHydOption.SaveAndInit . closeH \u00b6 Closes the hydraulic solver freeing all of its allocated memory. closeH () : void Call closeH after all hydraulics analyses have been made using initH - runH - nextH . Do not call this function if solveH is being used.","title":"Hydraulic Analysis"},{"location":"api/project-functions/hydraulic-analysis/#hydraulic-analysis-functions","text":"These functions are used to perform a hydraulic analysis. Function Description solveH Runs a complete hydraulic simulation with results for all time periods written to a temporary hydraulics file. useHydFile Uses a previously saved binary hydraulics file to supply a project's hydraulics. openH Opens a project's hydraulic solver. initH Initializes a network prior to running a hydraulic analysis. runH Computes a hydraulic solution for the current point in time. nextH Determines the length of time until the next hydraulic event occurs in an extended period simulation. saveH Transfers a project's hydraulics results from its temporary hydraulics file to its binary output file, where results are only reported at uniform reporting intervals. saveHydFile Saves a project's temporary hydraulics file to disk. closeH Closes the hydraulic solver freeing all of its allocated memory.","title":"Hydraulic Analysis Functions"},{"location":"api/project-functions/hydraulic-analysis/#solveh","text":"Runs a complete hydraulic simulation with results for all time periods written to a temporary hydraulics file. solveH () : void Use solveH to generate a complete hydraulic solution which can stand alone or be used as input to a water quality analysis. This function will not allow one to examine intermediate hydraulic results as they are generated. It can also be followed by calls to saveH and report to write hydraulic results to the report file. The sequence openH - initH - runH - nextH - closeH can be used instead to gain access to results at intermediate time periods and directly adjust link status and control settings as a simulation proceeds.","title":"solveH"},{"location":"api/project-functions/hydraulic-analysis/#usehydfile","text":"Uses a previously saved binary hydraulics file to supply a project's hydraulics. useHydFile ( filename : string ) : void Parameters Parameter Type Description filename String the name of the binary file containing hydraulic results. Call this function to re-use a set of hydraulic analysis results saved previously. This can save computational time if water quality analyses are being made under the same set of hydraulic conditions. Do not call this function while the hydraulics solver is open.","title":"useHydFile"},{"location":"api/project-functions/hydraulic-analysis/#openh","text":"Opens a project's hydraulic solver. openH () : void Call openH prior to running the first hydraulic analysis using the initH - runH - nextH sequence. Multiple analyses can be made before calling closeH to close the hydraulic solver. Do not call this function if solveH is being used to run a complete hydraulic analysis or if hydraulics are being supplied by a previously saved hydraulics file using useHydFile .","title":"openH"},{"location":"api/project-functions/hydraulic-analysis/#inith","text":"Initializes a network prior to running a hydraulic analysis. initH ( initFlag : InitHydOption ) : void Parameters Parameter Type Description initFlag InitHydOption a 2-digit initialization flag (see InitHydOption ). This function initializes storage tank levels, link status and settings, and the simulation time clock prior to running a hydraulic analysis. The initialization flag is a two digit number where the 1st (left) digit indicates if link flows should be re-initialized (1) or not (0), and the 2nd digit indicates if hydraulic results should be saved to a temporary binary hydraulics file (1) or not (0). Be sure to call initH prior to running a hydraulic analysis using a runH - nextH loop. Choose to save hydraulics results if you will be: making a subsequent water quality run, using report to generate a report using saveHydFile to save the binary hydraulics file. There is no need to save hydraulics if you will be writing custom code to process hydraulic results as they are generated using the functions getNodeValue and getLinkValue .","title":"initH"},{"location":"api/project-functions/hydraulic-analysis/#runh","text":"Computes a hydraulic solution for the current point in time. runH () : Number Returns Number The current simulation time in seconds. This function is used in a loop with nextH to run an extended period hydraulic simulation. initH must have been called prior to running the runH - nextH loop.","title":"runH"},{"location":"api/project-functions/hydraulic-analysis/#nexth","text":"Determines the length of time until the next hydraulic event occurs in an extended period simulation. nextH () : Number Returns Number The time (in seconds) until the next hydraulic event or 0 if at the end of the full simulation duration. This function is used in a loop with runH to run an extended period hydraulic simulation. The return value is automatically computed as the smaller of: the time interval until the next hydraulic time step begins the time interval until the next reporting time step begins the time interval until the next change in demands occurs the time interval until a tank becomes full or empty the time interval until a control or rule fires.","title":"nextH"},{"location":"api/project-functions/hydraulic-analysis/#saveh","text":"Transfers a project's hydraulics results from its temporary hydraulics file to its binary output file, where results are only reported at uniform reporting intervals. saveH () : void saveH is used when only a hydraulic analysis is run and results at uniform reporting intervals need to be transferred to a project's binary output file. Such would be the case when results are to be written in formatted fashion to the project's report file using report .","title":"saveH"},{"location":"api/project-functions/hydraulic-analysis/#savehydfile","text":"Saves a project's temporary hydraulics file to disk. saveHydFile ( filename : String ) : void Parameters Parameter Type Description filename String the name of the file to be created. Use this function to save the current set of hydraulics results to a file, either for post-processing or to be used at a later time by calling the useHydFile function. The hydraulics file contains nodal demands and heads and link flows, status, and settings for all hydraulic time steps, even intermediate ones. Before calling this function hydraulic results must have been generated and saved by having called solveH or the initH - runH - nextH sequence with the initflag argument of initH set to InitHydOption.Save or InitHydOption.SaveAndInit .","title":"saveHydFile"},{"location":"api/project-functions/hydraulic-analysis/#closeh","text":"Closes the hydraulic solver freeing all of its allocated memory. closeH () : void Call closeH after all hydraulics analyses have been made using initH - runH - nextH . Do not call this function if solveH is being used.","title":"closeH"},{"location":"api/project-functions/network-link/","text":"Network Link Functions \u00b6 These functions are used for working with network links. Function Description addLink Adds a new link to a project. deleteLink Deletes a link from the project. getLinkIndex Gets the index of a link given its ID name. getLinkId Gets the ID name of a link given its index. setLinkId Changes the ID name of a link. getLinkType Retrieves a link's type. setLinkType Changes a link's type. getLinkNodes Gets the indexes of a link's start- and end-nodes. setLinkNodes Sets the indexes of a link's start- and end-nodes. getLinkValue Retrieves a property value for a link. setLinkValue Sets a property value for a link. setPipeData Sets a group of properties for a pipe link. getPumpType Retrieves the type of head curve used by a pump. getHeadCurveIndex Retrieves the curve assigned to a pump's head curve. setHeadCurveIndex Assigns a curve to a pump's head curve. getVertexCount Retrieves the number of internal vertex points assigned to a link. getVertex Retrieves the coordinate's of a vertex point assigned to a link. setVertices Assigns a set of internal vertex points to a link. addLink \u00b6 Adds a new link to a project. addLink ( id : string , linkType : LinkType , fromNode : string , toNode : string ) : number ; Parameters Parameter Type Description id string the ID name of the link to be added. linkType LinkType The type of link being added (see LinkType ) fromNode string The ID name of the link's starting node. toNode string The ID name of the link's ending node. Returns Number the index of the newly added link. A new pipe is assigned a diameter of 10 inches (254 mm) and a length of 330 feet (~ 100 meters). Its roughness coefficient depends on the head loss formula in effect (see HeadLossType ) as follows: Hazen-Williams formula: 130 Darcy-Weisbach formula: 0.5 millifeet (0.15 mm) *Chezy-Manning formula: 0.01 All other pipe properties are set to 0. A new pump has a status of LinkStatusType.Open , a speed setting of 1, and has no pump curve or power rating assigned to it. A new valve has a diameter of 10 inches (254 mm) and all other properties set to 0. See LinkProperty . deleteLink \u00b6 Deletes a link from the project. deleteLink ( index : number , actionCode : ActionCodeType ) : void ; Parameters Parameter Type Description index number the index of the link to be deleted. actionCode ActionCodeType The action taken if any control contains the link. If actionCode is ActionCodeType.Unconditional then the link and all simple and rule-based controls that contain it are deleted. If set to ActionCodeType.Conditional then the link is not deleted if it appears in any control and error 261 is returned. getLinkIndex \u00b6 Gets the index of a link given its ID name. getLinkIndex ( id : string ) : number ; Parameters Parameter Type Description id string a link's ID name. Returns Number the link's index (starting from 1). getLinkId \u00b6 Gets the ID name of a link given its index. getLinkId ( index : number ) : string ; Parameters Parameter Type Description index number a link's index (starting from 1). Returns string The link's ID name. setLinkId \u00b6 Changes the ID name of a link. setLinkId ( index : number , newid : string ) : void ; Parameters Parameter Type Description index number a link's index (starting from 1). newid string the new ID name for the link. getLinkType \u00b6 Retrieves a link's type. getLinkType ( index : number ) : LinkType ; Parameters Parameter Type Description index number a link's index (starting from 1). Returns LinkType the link's type (see LinkType ). setLinkType \u00b6 Changes a link's type. setLinkType ( index : number , linkType : LinkType , actionCode : ActionCodeType ) : number ; Parameters Parameter Type Description index number the link's index linkType LinkType the new type to change the link to (see LinkType ). actionCode ActionCodeType the action taken if any controls contain the link. Returns Number the link's new index after the type change. If actionCode is ActionCodeType.Unconditional then all simple and rule-based controls that contain the link are deleted when the link's type is changed. If set to ActionCodeType.Conditional then the type change is cancelled if the link appears in any control and error 261 is returned. getLinkNodes \u00b6 Gets the indexes of a link's start- and end-nodes. getLinkNodes ( index : number ) : { node1 : number ; node2 : number ; }; Parameters Parameter Type Description index number a link's index (starting from 1). Returns Object { node1 : number ; node2 : number ; } Property Type Description node1 number the index of the link's start node (starting from 1). node2 number the index of the link's end node (starting from 1). setLinkNodes \u00b6 Sets the indexes of a link's start- and end-nodes. setLinkNodes ( index : number , node1 : number , node2 : number ) : void ; Parameters Parameter Type Description index number a link's index (starting from 1). node1 number The index of the link's start node (starting from 1). node2 number The index of the link's end node (starting from 1). getLinkValue \u00b6 Retrieves a property value for a link. getLinkValue ( index : number , property : LinkProperty ) : number ; Parameters Parameter Type Description index number a link's index (starting from 1). property LinkProperty the property to retrieve (see LinkProperty ). Returns Number the current value of the property. Values are returned in units that depend on the units used for flow rate (see Measurement Units). setLinkValue \u00b6 Sets a property value for a link. setLinkValue ( index : number , property : number , value : number ) : void ; Parameters Parameter Type Description index number a link's index. property number the property to set (see LinkProperty ). value number the new value for the property. Values are in units that depend on the units used for flow rate (see Measurement Units). setPipeData \u00b6 Sets a group of properties for a pipe link. setPipeData ( index : number , length : number , diam : number , rough : number , mloss : number ) : void ; Parameters Parameter Type Description index number the index of a pipe link (starting from 1). length number the pipe's length. diam number the pipe's diameter. rough number the pipe's roughness coefficient. mloss number the pipe's minor loss coefficient. These properties have units that depend on the units used for flow rate (see Measurement Units). getPumpType \u00b6 Retrieves the type of head curve used by a pump. getPumpType ( index : number ) : PumpType ; Parameters Parameter Type Description index number the index of a pump link (starting from 1). Returns PumpType the type of head curve used by the pump (see PumpType ). getHeadCurveIndex \u00b6 Retrieves the curve assigned to a pump's head curve. getHeadCurveIndex ( linkIndex : number ) : number ; Parameters Parameter Type Description linkIndex number the index of a pump link (starting from 1). Returns Number the index of the curve assigned to the pump's head curve. setHeadCurveIndex \u00b6 Assigns a curve to a pump's head curve. setHeadCurveIndex ( linkIndex : number , curveIndex : number ) : void ; Parameters Parameter Type Description linkIndex number the index of a pump link (starting from 1). curveIndex number the index of a curve to be assigned as the pump's head curve. getVertexCount \u00b6 Retrieves the number of internal vertex points assigned to a link. getVertexCount ( index : number ) : number ; Parameters Parameter Type Description index number a link's index (starting from 1). Returns Number the number of vertex points that describe the link's shape. getVertex \u00b6 Retrieves the coordinate's of a vertex point assigned to a link. getVertex ( index : number , vertex : number ) : { x : number ; y : number ; }; Parameters Parameter Type Description index number a link's index (starting from 1). vertex number a vertex point index (starting from 1). Returns Object { x : number ; y : number ; } Property Type Description x number the vertex's X-coordinate value. y number the vertex's Y-coordinate value. setVertices \u00b6 Assigns a set of internal vertex points to a link. setVertices ( index : number , x : number [], y : number []) : void ; Parameters Parameter Type Description index number a link's index (starting from 1). x Number[] an array of X-coordinates for the vertex points. y Number[] an array of Y-coordinates for the vertex points. Replaces any existing vertices previously assigned to the link.","title":"Network Link"},{"location":"api/project-functions/network-link/#network-link-functions","text":"These functions are used for working with network links. Function Description addLink Adds a new link to a project. deleteLink Deletes a link from the project. getLinkIndex Gets the index of a link given its ID name. getLinkId Gets the ID name of a link given its index. setLinkId Changes the ID name of a link. getLinkType Retrieves a link's type. setLinkType Changes a link's type. getLinkNodes Gets the indexes of a link's start- and end-nodes. setLinkNodes Sets the indexes of a link's start- and end-nodes. getLinkValue Retrieves a property value for a link. setLinkValue Sets a property value for a link. setPipeData Sets a group of properties for a pipe link. getPumpType Retrieves the type of head curve used by a pump. getHeadCurveIndex Retrieves the curve assigned to a pump's head curve. setHeadCurveIndex Assigns a curve to a pump's head curve. getVertexCount Retrieves the number of internal vertex points assigned to a link. getVertex Retrieves the coordinate's of a vertex point assigned to a link. setVertices Assigns a set of internal vertex points to a link.","title":"Network Link Functions"},{"location":"api/project-functions/network-link/#addlink","text":"Adds a new link to a project. addLink ( id : string , linkType : LinkType , fromNode : string , toNode : string ) : number ; Parameters Parameter Type Description id string the ID name of the link to be added. linkType LinkType The type of link being added (see LinkType ) fromNode string The ID name of the link's starting node. toNode string The ID name of the link's ending node. Returns Number the index of the newly added link. A new pipe is assigned a diameter of 10 inches (254 mm) and a length of 330 feet (~ 100 meters). Its roughness coefficient depends on the head loss formula in effect (see HeadLossType ) as follows: Hazen-Williams formula: 130 Darcy-Weisbach formula: 0.5 millifeet (0.15 mm) *Chezy-Manning formula: 0.01 All other pipe properties are set to 0. A new pump has a status of LinkStatusType.Open , a speed setting of 1, and has no pump curve or power rating assigned to it. A new valve has a diameter of 10 inches (254 mm) and all other properties set to 0. See LinkProperty .","title":"addLink"},{"location":"api/project-functions/network-link/#deletelink","text":"Deletes a link from the project. deleteLink ( index : number , actionCode : ActionCodeType ) : void ; Parameters Parameter Type Description index number the index of the link to be deleted. actionCode ActionCodeType The action taken if any control contains the link. If actionCode is ActionCodeType.Unconditional then the link and all simple and rule-based controls that contain it are deleted. If set to ActionCodeType.Conditional then the link is not deleted if it appears in any control and error 261 is returned.","title":"deleteLink"},{"location":"api/project-functions/network-link/#getlinkindex","text":"Gets the index of a link given its ID name. getLinkIndex ( id : string ) : number ; Parameters Parameter Type Description id string a link's ID name. Returns Number the link's index (starting from 1).","title":"getLinkIndex"},{"location":"api/project-functions/network-link/#getlinkid","text":"Gets the ID name of a link given its index. getLinkId ( index : number ) : string ; Parameters Parameter Type Description index number a link's index (starting from 1). Returns string The link's ID name.","title":"getLinkId"},{"location":"api/project-functions/network-link/#setlinkid","text":"Changes the ID name of a link. setLinkId ( index : number , newid : string ) : void ; Parameters Parameter Type Description index number a link's index (starting from 1). newid string the new ID name for the link.","title":"setLinkId"},{"location":"api/project-functions/network-link/#getlinktype","text":"Retrieves a link's type. getLinkType ( index : number ) : LinkType ; Parameters Parameter Type Description index number a link's index (starting from 1). Returns LinkType the link's type (see LinkType ).","title":"getLinkType"},{"location":"api/project-functions/network-link/#setlinktype","text":"Changes a link's type. setLinkType ( index : number , linkType : LinkType , actionCode : ActionCodeType ) : number ; Parameters Parameter Type Description index number the link's index linkType LinkType the new type to change the link to (see LinkType ). actionCode ActionCodeType the action taken if any controls contain the link. Returns Number the link's new index after the type change. If actionCode is ActionCodeType.Unconditional then all simple and rule-based controls that contain the link are deleted when the link's type is changed. If set to ActionCodeType.Conditional then the type change is cancelled if the link appears in any control and error 261 is returned.","title":"setLinkType"},{"location":"api/project-functions/network-link/#getlinknodes","text":"Gets the indexes of a link's start- and end-nodes. getLinkNodes ( index : number ) : { node1 : number ; node2 : number ; }; Parameters Parameter Type Description index number a link's index (starting from 1). Returns Object { node1 : number ; node2 : number ; } Property Type Description node1 number the index of the link's start node (starting from 1). node2 number the index of the link's end node (starting from 1).","title":"getLinkNodes"},{"location":"api/project-functions/network-link/#setlinknodes","text":"Sets the indexes of a link's start- and end-nodes. setLinkNodes ( index : number , node1 : number , node2 : number ) : void ; Parameters Parameter Type Description index number a link's index (starting from 1). node1 number The index of the link's start node (starting from 1). node2 number The index of the link's end node (starting from 1).","title":"setLinkNodes"},{"location":"api/project-functions/network-link/#getlinkvalue","text":"Retrieves a property value for a link. getLinkValue ( index : number , property : LinkProperty ) : number ; Parameters Parameter Type Description index number a link's index (starting from 1). property LinkProperty the property to retrieve (see LinkProperty ). Returns Number the current value of the property. Values are returned in units that depend on the units used for flow rate (see Measurement Units).","title":"getLinkValue"},{"location":"api/project-functions/network-link/#setlinkvalue","text":"Sets a property value for a link. setLinkValue ( index : number , property : number , value : number ) : void ; Parameters Parameter Type Description index number a link's index. property number the property to set (see LinkProperty ). value number the new value for the property. Values are in units that depend on the units used for flow rate (see Measurement Units).","title":"setLinkValue"},{"location":"api/project-functions/network-link/#setpipedata","text":"Sets a group of properties for a pipe link. setPipeData ( index : number , length : number , diam : number , rough : number , mloss : number ) : void ; Parameters Parameter Type Description index number the index of a pipe link (starting from 1). length number the pipe's length. diam number the pipe's diameter. rough number the pipe's roughness coefficient. mloss number the pipe's minor loss coefficient. These properties have units that depend on the units used for flow rate (see Measurement Units).","title":"setPipeData"},{"location":"api/project-functions/network-link/#getpumptype","text":"Retrieves the type of head curve used by a pump. getPumpType ( index : number ) : PumpType ; Parameters Parameter Type Description index number the index of a pump link (starting from 1). Returns PumpType the type of head curve used by the pump (see PumpType ).","title":"getPumpType"},{"location":"api/project-functions/network-link/#getheadcurveindex","text":"Retrieves the curve assigned to a pump's head curve. getHeadCurveIndex ( linkIndex : number ) : number ; Parameters Parameter Type Description linkIndex number the index of a pump link (starting from 1). Returns Number the index of the curve assigned to the pump's head curve.","title":"getHeadCurveIndex"},{"location":"api/project-functions/network-link/#setheadcurveindex","text":"Assigns a curve to a pump's head curve. setHeadCurveIndex ( linkIndex : number , curveIndex : number ) : void ; Parameters Parameter Type Description linkIndex number the index of a pump link (starting from 1). curveIndex number the index of a curve to be assigned as the pump's head curve.","title":"setHeadCurveIndex"},{"location":"api/project-functions/network-link/#getvertexcount","text":"Retrieves the number of internal vertex points assigned to a link. getVertexCount ( index : number ) : number ; Parameters Parameter Type Description index number a link's index (starting from 1). Returns Number the number of vertex points that describe the link's shape.","title":"getVertexCount"},{"location":"api/project-functions/network-link/#getvertex","text":"Retrieves the coordinate's of a vertex point assigned to a link. getVertex ( index : number , vertex : number ) : { x : number ; y : number ; }; Parameters Parameter Type Description index number a link's index (starting from 1). vertex number a vertex point index (starting from 1). Returns Object { x : number ; y : number ; } Property Type Description x number the vertex's X-coordinate value. y number the vertex's Y-coordinate value.","title":"getVertex"},{"location":"api/project-functions/network-link/#setvertices","text":"Assigns a set of internal vertex points to a link. setVertices ( index : number , x : number [], y : number []) : void ; Parameters Parameter Type Description index number a link's index (starting from 1). x Number[] an array of X-coordinates for the vertex points. y Number[] an array of Y-coordinates for the vertex points. Replaces any existing vertices previously assigned to the link.","title":"setVertices"},{"location":"api/project-functions/network-node/","text":"Network Node Functions \u00b6 These functions are used for working with network nodes. More... Function Description addNode Adds a new node to a project. deleteNode Deletes a node from a project. getNodeIndex Gets the index of a node given its ID name. getNodeId Gets the ID name of a node given its index. setNodeId Changes the ID name of a node. getNodeType Retrieves a node's type given its index. getNodeValue Retrieves a property value for a node. setNodeValue Sets a property value for a node. setJunctionData Sets a group of properties for a junction node. setTankData Sets a group of properties for a tank node. getCoordinates Gets the (x,y) coordinates of a node. setCoordinates Sets the (x,y) coordinates of a node. addNode \u00b6 Adds a new node to a project. addNode ( id : string , nodeType : NodeType ) : number ; Parameters Parameter Type Description id string the ID name of the node to be added. nodeType NodeType the type of node being added (see NodeType ) Returns Number the index of the newly added node When a new node is created all of its properties (see NodeProperty ) are set to 0. deleteNode \u00b6 Deletes a node from a project. deleteNode ( index : number , actionCode : ActionCodeType ) : void ; Parameters Parameter Type Description index number the index of the node to be deleted. actionCode ActionCodeType the action taken if any control contains the node and its links. If actionCode is ActionCodeType.Unconditional then the node, its incident links and all simple and rule-based controls that contain them are deleted. If set to ActionCodeType.Conditional then the node is not deleted if it or its incident links appear in any controls and error code 261 is returned. getNodeIndex \u00b6 Gets the index of a node given its ID name. getNodeIndex ( id : string ) : number ; Parameters Parameter Type Description id string a node ID name. Returns Number the node's index (starting from 1). getNodeId \u00b6 Gets the ID name of a node given its index. getNodeId ( index : number ) : string ; Parameters Parameter Type Description index number a node's index (starting from 1). Returns String the node's ID name. setNodeId \u00b6 Changes the ID name of a node. setNodeId ( index : number , newid : string ) : void ; Parameters Parameter Type Description index number a node's index (starting from 1). newid string the new ID name for the node. getNodeType \u00b6 Retrieves a node's type given its index. getNodeType ( index : number ) : NodeType ; Parameters Parameter Type Description index number a node's index (starting from 1). Returns NodeType the node's type (see NodeType ). getNodeValue \u00b6 Retrieves a property value for a node. getNodeValue ( index : number , property : NodeProperty ) : number ; Parameters Parameter Type Description index number a node's index. property NodeProperty the property to retrieve (see NodeProperty ). Returns Number the current value of the property. Values are returned in units that depend on the units used for flow rate (see Measurement Units). setNodeValue \u00b6 Sets a property value for a node. setNodeValue ( index : number , property : NodeProperty , value : number ) : void ; Parameters Parameter Type Description index number a node's index (starting from 1). property NodeProperty the property to set (see NodeProperty ). value number the new value for the property. Values are in units that depend on the units used for flow rate (see Measurement Units). setJunctionData \u00b6 Sets a group of properties for a junction node. setJunctionData ( index : number , elev : number , dmnd : number , dmndpat : string ) : void ; Parameters Parameter Type Description index number a junction node's index (starting from 1). elev number the value of the junction's elevation. dmnd number the value of the junction's primary base demand. dmndpat string the ID name of the demand's time pattern (\"\" for no pattern) These properties have units that depend on the units used for flow rate (see Measurement Units). setTankData \u00b6 Sets a group of properties for a tank node. setTankData ( index : number , elev : number , initlvl : number , minlvl : number , maxlvl : number , diam : number , minvol : number , volcurve : string ) : void ; Parameters Parameter Type Description index number a tank node's index (starting from 1). elev number the tank's bottom elevation. initlvl number the initial water level in the tank. minlvl number the minimum water level for the tank. maxlvl number the maximum water level for the tank. diam number the tank's diameter (0 if a volume curve is supplied). minvol number the volume of the tank at its minimum water level. volcurve string the name of the tank's volume curve (\"\" for no curve) These properties have units that depend on the units used for flow rate (see Measurement Units). getCoordinates \u00b6 Gets the (x,y) coordinates of a node. getCoordinates ( index : number ) : { x : number ; y : number ; }; Parameters Parameter Type Description index number a node index (starting from 1). Returns Object { x : number ; y : number ; } Property Type Description x number the node's X-coordinate value. y number the node's Y-coordinate value. setCoordinates \u00b6 Sets the (x,y) coordinates of a node. setCoordinates ( index : number , x : number , y : number ) : void ; Parameters Parameter Type Description index number a node index (starting from 1). x number the node's X-coordinate value. y number the node's Y-coordinate value.","title":"Network Node"},{"location":"api/project-functions/network-node/#network-node-functions","text":"These functions are used for working with network nodes. More... Function Description addNode Adds a new node to a project. deleteNode Deletes a node from a project. getNodeIndex Gets the index of a node given its ID name. getNodeId Gets the ID name of a node given its index. setNodeId Changes the ID name of a node. getNodeType Retrieves a node's type given its index. getNodeValue Retrieves a property value for a node. setNodeValue Sets a property value for a node. setJunctionData Sets a group of properties for a junction node. setTankData Sets a group of properties for a tank node. getCoordinates Gets the (x,y) coordinates of a node. setCoordinates Sets the (x,y) coordinates of a node.","title":"Network Node Functions"},{"location":"api/project-functions/network-node/#addnode","text":"Adds a new node to a project. addNode ( id : string , nodeType : NodeType ) : number ; Parameters Parameter Type Description id string the ID name of the node to be added. nodeType NodeType the type of node being added (see NodeType ) Returns Number the index of the newly added node When a new node is created all of its properties (see NodeProperty ) are set to 0.","title":"addNode"},{"location":"api/project-functions/network-node/#deletenode","text":"Deletes a node from a project. deleteNode ( index : number , actionCode : ActionCodeType ) : void ; Parameters Parameter Type Description index number the index of the node to be deleted. actionCode ActionCodeType the action taken if any control contains the node and its links. If actionCode is ActionCodeType.Unconditional then the node, its incident links and all simple and rule-based controls that contain them are deleted. If set to ActionCodeType.Conditional then the node is not deleted if it or its incident links appear in any controls and error code 261 is returned.","title":"deleteNode"},{"location":"api/project-functions/network-node/#getnodeindex","text":"Gets the index of a node given its ID name. getNodeIndex ( id : string ) : number ; Parameters Parameter Type Description id string a node ID name. Returns Number the node's index (starting from 1).","title":"getNodeIndex"},{"location":"api/project-functions/network-node/#getnodeid","text":"Gets the ID name of a node given its index. getNodeId ( index : number ) : string ; Parameters Parameter Type Description index number a node's index (starting from 1). Returns String the node's ID name.","title":"getNodeId"},{"location":"api/project-functions/network-node/#setnodeid","text":"Changes the ID name of a node. setNodeId ( index : number , newid : string ) : void ; Parameters Parameter Type Description index number a node's index (starting from 1). newid string the new ID name for the node.","title":"setNodeId"},{"location":"api/project-functions/network-node/#getnodetype","text":"Retrieves a node's type given its index. getNodeType ( index : number ) : NodeType ; Parameters Parameter Type Description index number a node's index (starting from 1). Returns NodeType the node's type (see NodeType ).","title":"getNodeType"},{"location":"api/project-functions/network-node/#getnodevalue","text":"Retrieves a property value for a node. getNodeValue ( index : number , property : NodeProperty ) : number ; Parameters Parameter Type Description index number a node's index. property NodeProperty the property to retrieve (see NodeProperty ). Returns Number the current value of the property. Values are returned in units that depend on the units used for flow rate (see Measurement Units).","title":"getNodeValue"},{"location":"api/project-functions/network-node/#setnodevalue","text":"Sets a property value for a node. setNodeValue ( index : number , property : NodeProperty , value : number ) : void ; Parameters Parameter Type Description index number a node's index (starting from 1). property NodeProperty the property to set (see NodeProperty ). value number the new value for the property. Values are in units that depend on the units used for flow rate (see Measurement Units).","title":"setNodeValue"},{"location":"api/project-functions/network-node/#setjunctiondata","text":"Sets a group of properties for a junction node. setJunctionData ( index : number , elev : number , dmnd : number , dmndpat : string ) : void ; Parameters Parameter Type Description index number a junction node's index (starting from 1). elev number the value of the junction's elevation. dmnd number the value of the junction's primary base demand. dmndpat string the ID name of the demand's time pattern (\"\" for no pattern) These properties have units that depend on the units used for flow rate (see Measurement Units).","title":"setJunctionData"},{"location":"api/project-functions/network-node/#settankdata","text":"Sets a group of properties for a tank node. setTankData ( index : number , elev : number , initlvl : number , minlvl : number , maxlvl : number , diam : number , minvol : number , volcurve : string ) : void ; Parameters Parameter Type Description index number a tank node's index (starting from 1). elev number the tank's bottom elevation. initlvl number the initial water level in the tank. minlvl number the minimum water level for the tank. maxlvl number the maximum water level for the tank. diam number the tank's diameter (0 if a volume curve is supplied). minvol number the volume of the tank at its minimum water level. volcurve string the name of the tank's volume curve (\"\" for no curve) These properties have units that depend on the units used for flow rate (see Measurement Units).","title":"setTankData"},{"location":"api/project-functions/network-node/#getcoordinates","text":"Gets the (x,y) coordinates of a node. getCoordinates ( index : number ) : { x : number ; y : number ; }; Parameters Parameter Type Description index number a node index (starting from 1). Returns Object { x : number ; y : number ; } Property Type Description x number the node's X-coordinate value. y number the node's Y-coordinate value.","title":"getCoordinates"},{"location":"api/project-functions/network-node/#setcoordinates","text":"Sets the (x,y) coordinates of a node. setCoordinates ( index : number , x : number , y : number ) : void ; Parameters Parameter Type Description index number a node index (starting from 1). x number the node's X-coordinate value. y number the node's Y-coordinate value.","title":"setCoordinates"},{"location":"api/project-functions/nodal-demand/","text":"Nodal Demand Functions \u00b6 These functions are used for managing nodal demands. Function Description addDemand appends a new demand to a junction node demands list. deleteDemand deletes a demand from a junction node. getBaseDemand Gets the base demand for one of a node's demand categories. getDemandIndex Retrieves the index of a node's named demand category. getDemandModel Retrieves the type of demand model in use and its parameters. getDemandName Retrieves the name of a node's demand category. getDemandPattern Retrieves the index of a time pattern assigned to one of a node's demand categories. getNumberOfDemands Retrieves the number of demand categories for a junction node. setBaseDemand Sets the base demand for one of a node's demand categories. setDemandModel Sets the type of demand model to use and its parameters. setDemandName Assigns a name to a node's demand category. setDemandPattern Sets the index of a time pattern used for one of a node's demand categories. addDemand \u00b6 appends a new demand to a junction node demands list. addDemand ( nodeIndex : number , baseDemand : number , demandPattern : string , demandName : string ) : void ; Parameters Parameter Type Description nodeIndex number the index of a node (starting from 1). baseDemand number the demand's base value. demandPattern string the name of a time pattern used by the demand demandName string the name of the demand's category A NULL or blank string can be used for demandPattern and for demandName to indicate that no time pattern or category name is associated with the demand. deleteDemand \u00b6 Deletes a demand from a junction node. deleteDemand ( nodeIndex : number , demandIndex : number ) : void ; Parameters Parameter Type Description nodeIndex the index of a node (starting from 1). demandIndex the position of the demand in the node's demands list (starting from 1). getBaseDemand \u00b6 Gets the base demand for one of a node's demand categories. getBaseDemand ( nodeIndex : number , demandIndex : number ) : number ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIndex number the index of a demand category for the node (starting from 1). Returns Number the category's base demand. getDemandIndex \u00b6 Retrieves the index of a node's named demand category. getDemandIndex ( nodeIndex : number , demandName : string ) : number ; Parameters Parameter Type Description nodeIndex number the index of a node (starting from 1) demandName string the name of a demand category for the node Returns Number the index of the demand being sought getDemandModel \u00b6 Retrieves the type of demand model in use and its parameters. getDemandModel () : { type : DemandModel ; pmin : number ; preq : number ; pexp : number ; }; Returns Object { type : DemandModel ; pmin : number ; preq : number ; pexp : number ; } Property Type Description type DemandModel Type of demand model (see DemandModel ). pmin number Pressure below which there is no demand. preq number Pressure required to deliver full demand. pexp number Pressure exponent in demand function. Parameters pmin, preq, and pexp are only used when the demand model is DemandModel.PDA . getDemandName \u00b6 Retrieves the name of a node's demand category. getDemandName ( nodeIndex : number , demandIndex : number ) : string ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIndex number the index of one of the node's demand categories (starting from 1). Returns String The name of the selected category. getDemandPattern \u00b6 Retrieves the index of a time pattern assigned to one of a node's demand categories. getDemandPattern ( nodeIndex : number , demandIndex : number ) : number ; Parameters Parameter Type Description nodeIndex number the node's index (starting from 1). demandIndex number the index of a demand category for the node (starting from 1). Returns Number the index of the category's time pattern. A returned pattern index of 0 indicates that no time pattern has been assigned to the demand category. getNumberOfDemands \u00b6 Retrieves the number of demand categories for a junction node. getNumberOfDemands ( nodeIndex : number ) : number ; Parameters Parameter Type Description nodeIndex number the index of a node (starting from 1). Returns Number the number of demand categories assigned to the node. setBaseDemand \u00b6 Sets the base demand for one of a node's demand categories. setBaseDemand ( nodeIndex : number , demandIndex : number , baseDemand : number ) : void ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIndex number the index of a demand category for the node (starting from 1). baseDemand number the new base demand for the category. setDemandModel \u00b6 Sets the type of demand model to use and its parameters. setDemandModel ( type : DemandModel , pmin : number , preq : number , pexp : number ) : void ; Parameters Parameter Type Description type DemandModel Type of demand model (see DemandModel ). pmin number Pressure below which there is no demand. preq number Pressure required to deliver full demand. pexp number Pressure exponent in demand function. Set type to EN_DDA for a traditional demand driven analysis (in which case the remaining three parameter values are ignored) or to EN_PDA for a pressure driven analysis. In the latter case a node's demand is computed as: Dfull * [ (P - pmin) / (preq - pmin) ] ^ pexp where Dfull is the full demand and P is the current pressure. Setting preq equal to pmin will result in a solution with the smallest amount of demand reductions needed to insure that no node delivers positive demand at a pressure below pmin. setDemandName \u00b6 Assigns a name to a node's demand category. setDemandName ( nodeIndex : number , demandIdx : number , demandName : string ) : void ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIdx number the index of one of the node's demand categories (starting from 1). demandName string the new name assigned to the category. setDemandPattern \u00b6 Sets the index of a time pattern used for one of a node's demand categories. setDemandPattern ( nodeIndex : number , demandIndex : number , patIndex : number ) : void ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIndex number the index of one of the node's demand categories (starting from 1). patIndex number the index of the time pattern assigned to the category. Specifying a pattern index of 0 indicates that no time pattern is assigned to the demand category.","title":"Nodal Demand"},{"location":"api/project-functions/nodal-demand/#nodal-demand-functions","text":"These functions are used for managing nodal demands. Function Description addDemand appends a new demand to a junction node demands list. deleteDemand deletes a demand from a junction node. getBaseDemand Gets the base demand for one of a node's demand categories. getDemandIndex Retrieves the index of a node's named demand category. getDemandModel Retrieves the type of demand model in use and its parameters. getDemandName Retrieves the name of a node's demand category. getDemandPattern Retrieves the index of a time pattern assigned to one of a node's demand categories. getNumberOfDemands Retrieves the number of demand categories for a junction node. setBaseDemand Sets the base demand for one of a node's demand categories. setDemandModel Sets the type of demand model to use and its parameters. setDemandName Assigns a name to a node's demand category. setDemandPattern Sets the index of a time pattern used for one of a node's demand categories.","title":"Nodal Demand Functions"},{"location":"api/project-functions/nodal-demand/#adddemand","text":"appends a new demand to a junction node demands list. addDemand ( nodeIndex : number , baseDemand : number , demandPattern : string , demandName : string ) : void ; Parameters Parameter Type Description nodeIndex number the index of a node (starting from 1). baseDemand number the demand's base value. demandPattern string the name of a time pattern used by the demand demandName string the name of the demand's category A NULL or blank string can be used for demandPattern and for demandName to indicate that no time pattern or category name is associated with the demand.","title":"addDemand"},{"location":"api/project-functions/nodal-demand/#deletedemand","text":"Deletes a demand from a junction node. deleteDemand ( nodeIndex : number , demandIndex : number ) : void ; Parameters Parameter Type Description nodeIndex the index of a node (starting from 1). demandIndex the position of the demand in the node's demands list (starting from 1).","title":"deleteDemand"},{"location":"api/project-functions/nodal-demand/#getbasedemand","text":"Gets the base demand for one of a node's demand categories. getBaseDemand ( nodeIndex : number , demandIndex : number ) : number ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIndex number the index of a demand category for the node (starting from 1). Returns Number the category's base demand.","title":"getBaseDemand"},{"location":"api/project-functions/nodal-demand/#getdemandindex","text":"Retrieves the index of a node's named demand category. getDemandIndex ( nodeIndex : number , demandName : string ) : number ; Parameters Parameter Type Description nodeIndex number the index of a node (starting from 1) demandName string the name of a demand category for the node Returns Number the index of the demand being sought","title":"getDemandIndex"},{"location":"api/project-functions/nodal-demand/#getdemandmodel","text":"Retrieves the type of demand model in use and its parameters. getDemandModel () : { type : DemandModel ; pmin : number ; preq : number ; pexp : number ; }; Returns Object { type : DemandModel ; pmin : number ; preq : number ; pexp : number ; } Property Type Description type DemandModel Type of demand model (see DemandModel ). pmin number Pressure below which there is no demand. preq number Pressure required to deliver full demand. pexp number Pressure exponent in demand function. Parameters pmin, preq, and pexp are only used when the demand model is DemandModel.PDA .","title":"getDemandModel"},{"location":"api/project-functions/nodal-demand/#getdemandname","text":"Retrieves the name of a node's demand category. getDemandName ( nodeIndex : number , demandIndex : number ) : string ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIndex number the index of one of the node's demand categories (starting from 1). Returns String The name of the selected category.","title":"getDemandName"},{"location":"api/project-functions/nodal-demand/#getdemandpattern","text":"Retrieves the index of a time pattern assigned to one of a node's demand categories. getDemandPattern ( nodeIndex : number , demandIndex : number ) : number ; Parameters Parameter Type Description nodeIndex number the node's index (starting from 1). demandIndex number the index of a demand category for the node (starting from 1). Returns Number the index of the category's time pattern. A returned pattern index of 0 indicates that no time pattern has been assigned to the demand category.","title":"getDemandPattern"},{"location":"api/project-functions/nodal-demand/#getnumberofdemands","text":"Retrieves the number of demand categories for a junction node. getNumberOfDemands ( nodeIndex : number ) : number ; Parameters Parameter Type Description nodeIndex number the index of a node (starting from 1). Returns Number the number of demand categories assigned to the node.","title":"getNumberOfDemands"},{"location":"api/project-functions/nodal-demand/#setbasedemand","text":"Sets the base demand for one of a node's demand categories. setBaseDemand ( nodeIndex : number , demandIndex : number , baseDemand : number ) : void ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIndex number the index of a demand category for the node (starting from 1). baseDemand number the new base demand for the category.","title":"setBaseDemand"},{"location":"api/project-functions/nodal-demand/#setdemandmodel","text":"Sets the type of demand model to use and its parameters. setDemandModel ( type : DemandModel , pmin : number , preq : number , pexp : number ) : void ; Parameters Parameter Type Description type DemandModel Type of demand model (see DemandModel ). pmin number Pressure below which there is no demand. preq number Pressure required to deliver full demand. pexp number Pressure exponent in demand function. Set type to EN_DDA for a traditional demand driven analysis (in which case the remaining three parameter values are ignored) or to EN_PDA for a pressure driven analysis. In the latter case a node's demand is computed as: Dfull * [ (P - pmin) / (preq - pmin) ] ^ pexp where Dfull is the full demand and P is the current pressure. Setting preq equal to pmin will result in a solution with the smallest amount of demand reductions needed to insure that no node delivers positive demand at a pressure below pmin.","title":"setDemandModel"},{"location":"api/project-functions/nodal-demand/#setdemandname","text":"Assigns a name to a node's demand category. setDemandName ( nodeIndex : number , demandIdx : number , demandName : string ) : void ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIdx number the index of one of the node's demand categories (starting from 1). demandName string the new name assigned to the category.","title":"setDemandName"},{"location":"api/project-functions/nodal-demand/#setdemandpattern","text":"Sets the index of a time pattern used for one of a node's demand categories. setDemandPattern ( nodeIndex : number , demandIndex : number , patIndex : number ) : void ; Parameters Parameter Type Description nodeIndex number a node's index (starting from 1). demandIndex number the index of one of the node's demand categories (starting from 1). patIndex number the index of the time pattern assigned to the category. Specifying a pattern index of 0 indicates that no time pattern is assigned to the demand category.","title":"setDemandPattern"},{"location":"api/project-functions/project/","text":"Project Functions \u00b6 These functions are used to manage a project. Function Description open Opens an EPANET input file & reads in network data. close Closes a project and frees all of its memory. runProject Runs a complete EPANET simulation. init Initializes an EPANET project. getCount Retrieves the number of objects of a given type in a project. getTitle Retrieves the title lines of the project. setTitle Sets the title lines of the project. saveInpFile Saves a project's data to an EPANET-formatted text file. runProject \u00b6 Runs a complete EPANET simulation. runProject ( inputFile : String , reportFile : String , outputFile : String ) : void Parameters Parameter Type Description inputFile String the name of an existing EPANET-formatted input file. reportFile String the name of a report file to be created (or \"\" if not needed) outputFile String the name of a binary output file to be created (or \"\" if not needed) Future versions of the epanetJS library will include the ability to attach a callback function similar to the EN_runproject function in OWA-EPANET . init \u00b6 Initializes an EPANET project. runProject ( rptFile : String , outFile : String , unitType : FlowUnits , headLosstype : HeadLossType ) : void Parameters Parameter Type Description rptFile String the name of a report file to be created (or \"\" if not needed) outFile String the name of a binary output file to be created (or \"\" if not needed). unitType FlowUnits the choice of flow units (see FlowUnits ) headLosstype HeadLossType the choice of head loss formula (see HeadLossType ) This function should be called immediately after a Project object is created if an EPANET-formatted input file will not be used to supply network data. If the project receives it's network data from an input file then there is no need to call this function. open \u00b6 Opens an EPANET input file & reads in network data. open ( inputFile : String , reportFile : String , outputFile : String ) : void Parameters Parameter Type Description inputFile String the name of an existing EPANET-formatted input file. reportFile String the name of a report file to be created (or \"\" if not needed). outputFile String the name of a binary output file to be created (or \"\" if not needed). getCount \u00b6 Retrieves the number of objects of a given type in a project. getCount ( obj : CountType ) : Number Parameters Parameter Type Description obj CountType a type of object to count. (see CountType ) Returns Number The number of objects of the specified type getTitle \u00b6 Retrieves the title lines of the project. getTitle () : Object Returns Object { line1 : String ; line2 : String ; line3 : String ; } Property Type Description line1 String first title line. line2 String second title line. line3 String third title line. setTitle \u00b6 Sets the title lines of the project. setTitle ( line1 : String , line2 : String , line3 : String ) : void Parameters Parameter Type Description line1 String first title line. line2 String second title line. line3 String third title line. saveInpFile \u00b6 Saves a project's data to an EPANET-formatted text file. saveInpFile ( filename : String ) : void Parameters Parameter Type Description filename String the name of the file to create. close \u00b6 Closes a project and frees all of its memory. close () : void This function clears all existing data from a project but does not delete the project, so it can be re-used with another set of network data.","title":"Project"},{"location":"api/project-functions/project/#project-functions","text":"These functions are used to manage a project. Function Description open Opens an EPANET input file & reads in network data. close Closes a project and frees all of its memory. runProject Runs a complete EPANET simulation. init Initializes an EPANET project. getCount Retrieves the number of objects of a given type in a project. getTitle Retrieves the title lines of the project. setTitle Sets the title lines of the project. saveInpFile Saves a project's data to an EPANET-formatted text file.","title":"Project Functions"},{"location":"api/project-functions/project/#runproject","text":"Runs a complete EPANET simulation. runProject ( inputFile : String , reportFile : String , outputFile : String ) : void Parameters Parameter Type Description inputFile String the name of an existing EPANET-formatted input file. reportFile String the name of a report file to be created (or \"\" if not needed) outputFile String the name of a binary output file to be created (or \"\" if not needed) Future versions of the epanetJS library will include the ability to attach a callback function similar to the EN_runproject function in OWA-EPANET .","title":"runProject"},{"location":"api/project-functions/project/#init","text":"Initializes an EPANET project. runProject ( rptFile : String , outFile : String , unitType : FlowUnits , headLosstype : HeadLossType ) : void Parameters Parameter Type Description rptFile String the name of a report file to be created (or \"\" if not needed) outFile String the name of a binary output file to be created (or \"\" if not needed). unitType FlowUnits the choice of flow units (see FlowUnits ) headLosstype HeadLossType the choice of head loss formula (see HeadLossType ) This function should be called immediately after a Project object is created if an EPANET-formatted input file will not be used to supply network data. If the project receives it's network data from an input file then there is no need to call this function.","title":"init"},{"location":"api/project-functions/project/#open","text":"Opens an EPANET input file & reads in network data. open ( inputFile : String , reportFile : String , outputFile : String ) : void Parameters Parameter Type Description inputFile String the name of an existing EPANET-formatted input file. reportFile String the name of a report file to be created (or \"\" if not needed). outputFile String the name of a binary output file to be created (or \"\" if not needed).","title":"open"},{"location":"api/project-functions/project/#getcount","text":"Retrieves the number of objects of a given type in a project. getCount ( obj : CountType ) : Number Parameters Parameter Type Description obj CountType a type of object to count. (see CountType ) Returns Number The number of objects of the specified type","title":"getCount"},{"location":"api/project-functions/project/#gettitle","text":"Retrieves the title lines of the project. getTitle () : Object Returns Object { line1 : String ; line2 : String ; line3 : String ; } Property Type Description line1 String first title line. line2 String second title line. line3 String third title line.","title":"getTitle"},{"location":"api/project-functions/project/#settitle","text":"Sets the title lines of the project. setTitle ( line1 : String , line2 : String , line3 : String ) : void Parameters Parameter Type Description line1 String first title line. line2 String second title line. line3 String third title line.","title":"setTitle"},{"location":"api/project-functions/project/#saveinpfile","text":"Saves a project's data to an EPANET-formatted text file. saveInpFile ( filename : String ) : void Parameters Parameter Type Description filename String the name of the file to create.","title":"saveInpFile"},{"location":"api/project-functions/project/#close","text":"Closes a project and frees all of its memory. close () : void This function clears all existing data from a project but does not delete the project, so it can be re-used with another set of network data.","title":"close"},{"location":"api/project-functions/reporting/","text":"Reporting Functions \u00b6 These functions are used to report simulation results. Function Description writeLine Writes a line of text to a project's report file. report Writes simulation results in a tabular format to a project's report file. copyReport Copies the current contents of a project's report file to another file. clearReport Clears the contents of a project's report file. resetReport Resets a project's report options to their default values. setReport Processes a reporting format command. setStatusReport Sets the level of hydraulic status reporting. getStatistic Retrieves a particular simulation statistic. getResultIndex Retrieves the order in which a node or link appears in an output file. writeLine \u00b6 Writes a line of text to a project's report file. writeLine ( line : string ) : void ; Parameters Parameter Type Description line String a text string to write. report \u00b6 Writes simulation results in a tabular format to a project's report file. report () : void ; Either a full hydraulic analysis or full hydraulic and water quality analysis must have been run, with results saved to file, before report is called. In the former case, saveH must also be called first to transfer results from the project's intermediate hydraulics file to its output file. The format of the report is controlled by commands issued with setreport . copyReport \u00b6 Copies the current contents of a project's report file to another file. copyReport ( filename : string ) : void ; Parameters Parameter Type Description filename String the full path name of the destination file. This function allows toolkit clients to retrieve the contents of a project's report file while the project is still open. clearReport \u00b6 Clears the contents of a project's report file. clearReport () : void ; resetReport \u00b6 Resets a project's report options to their default values. resetReport () : void ; After calling this function the default reporting options are in effect. These are: no status report no energy report no nodes reported on no links reported on node variables reported to 2 decimal places link variables reported to 2 decimal places (3 for friction factor) node variables reported are elevation, head, pressure, and quality link variables reported are flow, velocity, and head loss. setReport \u00b6 Processes a reporting format command. setReport ( format : string ) : void ; Parameters Parameter Type Description format String a report formatting command. Acceptable report formatting commands are described in the [REPORT] section of the Input File topic. Formatted results of a simulation can be written to a project's report file using the report function. setStatusReport \u00b6 Sets the level of hydraulic status reporting. setStatusReport ( level : StatusReport ) : void ; Parameters Parameter Type Description level StatusReport a status reporting level code (see StatusReport ). Status reporting writes changes in the hydraulics status of network elements to a project's report file as a hydraulic simulation unfolds. There are three levels of reporting: StatusReport.NoReport (no status reporting), StatusReport.NormalReport (normal reporting) StatusReport.FullReport (full status reporting). The full status report contains information at each trial of the solution to the system hydraulic equations at each time step of a simulation. It is useful mainly for debugging purposes. If many hydraulic analyses will be run in the application it is recommended that status reporting be turned off (level = StatusReport.NoReport ). getStatistic \u00b6 Retrieves a particular simulation statistic. getStatistic ( type : AnalysisStatistic ) : number ; Parameters Parameter Type Description type AnalysisStatistic the type of statistic to retrieve (see AnalysisStatistic ). Returns Number the value of the statistic. getResultIndex \u00b6 Retrieves the order in which a node or link appears in an output file. getResultIndex ( type : ObjectType.Node | ObjectType . Link , index : number ) : number ; Parameters Parameter Type Description type ObjectType.Node ObjectType.Link a type of element (either ObjectType.Node or ObjectType.Link ). index Number the element's current index (starting from 1). Returns Number the order in which the element's results were written to file. If the element does not appear in the file then its result index is 0. This function can be used to correctly retrieve results from an EPANET binary output file after the order of nodes or links in a network's database has been changed due to editing operations.","title":"Reporting"},{"location":"api/project-functions/reporting/#reporting-functions","text":"These functions are used to report simulation results. Function Description writeLine Writes a line of text to a project's report file. report Writes simulation results in a tabular format to a project's report file. copyReport Copies the current contents of a project's report file to another file. clearReport Clears the contents of a project's report file. resetReport Resets a project's report options to their default values. setReport Processes a reporting format command. setStatusReport Sets the level of hydraulic status reporting. getStatistic Retrieves a particular simulation statistic. getResultIndex Retrieves the order in which a node or link appears in an output file.","title":"Reporting Functions"},{"location":"api/project-functions/reporting/#writeline","text":"Writes a line of text to a project's report file. writeLine ( line : string ) : void ; Parameters Parameter Type Description line String a text string to write.","title":"writeLine"},{"location":"api/project-functions/reporting/#report","text":"Writes simulation results in a tabular format to a project's report file. report () : void ; Either a full hydraulic analysis or full hydraulic and water quality analysis must have been run, with results saved to file, before report is called. In the former case, saveH must also be called first to transfer results from the project's intermediate hydraulics file to its output file. The format of the report is controlled by commands issued with setreport .","title":"report"},{"location":"api/project-functions/reporting/#copyreport","text":"Copies the current contents of a project's report file to another file. copyReport ( filename : string ) : void ; Parameters Parameter Type Description filename String the full path name of the destination file. This function allows toolkit clients to retrieve the contents of a project's report file while the project is still open.","title":"copyReport"},{"location":"api/project-functions/reporting/#clearreport","text":"Clears the contents of a project's report file. clearReport () : void ;","title":"clearReport"},{"location":"api/project-functions/reporting/#resetreport","text":"Resets a project's report options to their default values. resetReport () : void ; After calling this function the default reporting options are in effect. These are: no status report no energy report no nodes reported on no links reported on node variables reported to 2 decimal places link variables reported to 2 decimal places (3 for friction factor) node variables reported are elevation, head, pressure, and quality link variables reported are flow, velocity, and head loss.","title":"resetReport"},{"location":"api/project-functions/reporting/#setreport","text":"Processes a reporting format command. setReport ( format : string ) : void ; Parameters Parameter Type Description format String a report formatting command. Acceptable report formatting commands are described in the [REPORT] section of the Input File topic. Formatted results of a simulation can be written to a project's report file using the report function.","title":"setReport"},{"location":"api/project-functions/reporting/#setstatusreport","text":"Sets the level of hydraulic status reporting. setStatusReport ( level : StatusReport ) : void ; Parameters Parameter Type Description level StatusReport a status reporting level code (see StatusReport ). Status reporting writes changes in the hydraulics status of network elements to a project's report file as a hydraulic simulation unfolds. There are three levels of reporting: StatusReport.NoReport (no status reporting), StatusReport.NormalReport (normal reporting) StatusReport.FullReport (full status reporting). The full status report contains information at each trial of the solution to the system hydraulic equations at each time step of a simulation. It is useful mainly for debugging purposes. If many hydraulic analyses will be run in the application it is recommended that status reporting be turned off (level = StatusReport.NoReport ).","title":"setStatusReport"},{"location":"api/project-functions/reporting/#getstatistic","text":"Retrieves a particular simulation statistic. getStatistic ( type : AnalysisStatistic ) : number ; Parameters Parameter Type Description type AnalysisStatistic the type of statistic to retrieve (see AnalysisStatistic ). Returns Number the value of the statistic.","title":"getStatistic"},{"location":"api/project-functions/reporting/#getresultindex","text":"Retrieves the order in which a node or link appears in an output file. getResultIndex ( type : ObjectType.Node | ObjectType . Link , index : number ) : number ; Parameters Parameter Type Description type ObjectType.Node ObjectType.Link a type of element (either ObjectType.Node or ObjectType.Link ). index Number the element's current index (starting from 1). Returns Number the order in which the element's results were written to file. If the element does not appear in the file then its result index is 0. This function can be used to correctly retrieve results from an EPANET binary output file after the order of nodes or links in a network's database has been changed due to editing operations.","title":"getResultIndex"},{"location":"api/project-functions/rule-based-control/","text":"Rule-Based Control Functions \u00b6 These functions are used for working with rule-based controls. Function Description addRule Adds a new rule-based control to a project. deleteRule Deletes an existing rule-based control. getRule Retrieves summary information about a rule-based control. getRuleId Gets the ID name of a rule-based control given its index. getPremise Gets the properties of a premise in a rule-based control. setPremise Sets the properties of a premise in a rule-based control. setPremiseIndex Sets the index of an object in a premise of a rule-based control. setPremiseStatus Sets the status being compared to in a premise of a rule-based control. setPremiseValue Sets the value in a premise of a rule-based control. getThenAction Gets the properties of a THEN action in a rule-based control. setThenAction Sets the properties of a THEN action in a rule-based control. getElseAction Gets the properties of an ELSE action in a rule-based control. setElseAction Sets the properties of an ELSE action in a rule-based control. setRulePriority Sets the priority of a rule-based control. addRule \u00b6 Adds a new rule-based control to a project. addRule ( rule : string ) : void ; Parameters Parameter Type Description rule rule text of the rule following the format used in an EPANET input file. Consult the [RULES] section of the Input File topic to learn about a rule's format. Each clause of the rule must end with a newline character \\n. deleteRule \u00b6 Deletes an existing rule-based control. deleteRule ( index : number ) : void ; Parameters Parameter Type Description index number the index of the rule to be deleted (starting from 1). getRule \u00b6 Retrieves summary information about a rule-based control. getRule ( index : number ) : { premiseCount : number ; thenActionCount : number ; elseActionCount : number ; priority : number ; }; Parameters Parameter Type Description index number the rule's index (starting from 1). Returns Object { premiseCount : number ; thenActionCount : number ; elseActionCount : number ; priority : number ; } Property Type Description premiseCount number number of premises in the rule's IF section. thenActionCount number number of actions in the rule's THEN section. elseActionCount number number of actions in the rule's ELSE section. priority number the rule's priority value. getRuleId \u00b6 Gets the ID name of a rule-based control given its index. getRuleId ( index : number ) : string ; Parameters Parameter Type Description index number the rule's index (starting from 1). Returns string the rule's ID name. getPremise \u00b6 Gets the properties of a premise in a rule-based control. getPremise ( ruleIndex : number , premiseIndex : number ) : { logop : number ; object : RuleObject ; objIndex : number ; variable : RuleVariable ; relop : RuleOperator ; status : RuleStatus ; value : number ; }; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the position of the premise in the rule's list of premises (starting from 1). Returns Object { logop : number ; object : RuleObject ; objIndex : number ; variable : RuleVariable ; relop : RuleOperator ; status : RuleStatus ; value : number ; } Property Type Description logop number the premise's logical operator ( IF = 1, AND = 2, OR = 3 ). object RuleObject the type of object the premise refers to (see RuleObject ). objIndex number the index of the object (e.g. the index of a tank). variable RuleVariable the object's variable being compared (see RuleVariable ). relop RuleOperator the premise's comparison operator (see RuleOperator ). status RuleStatus the status that the object's status is compared to (see RuleStatus ). value number the value that the object's variable is compared to. setPremise \u00b6 Sets the properties of a premise in a rule-based control. setPremise ( ruleIndex : number , premiseIndex : number , logop : number , object : RuleObject , objIndex : number , variable : RuleVariable , relop : RuleOperator , status : RuleStatus , value : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the position of the premise in the rule's list of premises (starting from 1). logop number the premise's logical operator ( IF = 1, AND = 2, OR = 3 ). object RuleObject the type of object the premise refers to (see RuleObject ). objIndex number the index of the object (e.g. the index of a tank). variable RuleVariable the object's variable being compared (see RuleVariable ). relop RuleOperator the premise's comparison operator (see RuleOperator ). status RuleStatus the status that the object's status is compared to (see RuleStatus ). value number the value that the object's variable is compared to. setPremiseIndex \u00b6 Sets the index of an object in a premise of a rule-based control. setPremiseIndex ( ruleIndex : number , premiseIndex : number , objIndex : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the premise's index (starting from 1). objIndex number the index of the premise's object (e.g. the index of a tank). setPremiseStatus \u00b6 Sets the status being compared to in a premise of a rule-based control. setPremiseStatus ( ruleIndex : number , premiseIndex : number , status : RuleStatus ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the premise's index (starting from 1). status RuleStatus the status that the premise's object status is compared to (see RuleStatus ). setPremiseValue \u00b6 Sets the value in a premise of a rule-based control. setPremiseValue ( ruleIndex : number , premiseIndex : number , value : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the premise's index (starting from 1). value number The value that the premise's variable is compared to. getThenAction \u00b6 Gets the properties of a THEN action in a rule-based control. getThenAction ( ruleIndex : number , actionIndex : number ) : { linkIndex : number ; status : RuleStatus ; setting : number ; }; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). actionIndex number the index of the THEN action to retrieve (starting from 1). Returns Object { linkIndex : number ; status : RuleStatus ; setting : number ; } Property Type Description linkIndex number the index of the link in the action (starting from 1). status RuleStatus the status assigned to the link (see RuleStatus ) setting number the value assigned to the link's setting. setThenAction \u00b6 Sets the properties of a THEN action in a rule-based control. setThenAction ( ruleIndex : number , actionIndex : number , linkIndex : number , status : RuleStatus , setting : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). actionIndex number the index of the THEN action to modify (starting from 1). linkIndex number the index of the link in the action. status RuleStatus the new status assigned to the link (see RuleStatus ). setting number the new value assigned to the link's setting. getElseAction \u00b6 Sets the properties of an ELSE action in a rule-based control. getElseAction ( ruleIndex : number , actionIndex : number ) : { linkIndex : number ; status : RuleStatus ; setting : number ; }; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). actionIndex number the index of the ELSE action to retrieve (starting from 1). Returns Object { linkIndex : number ; status : RuleStatus ; setting : number ; } Property Type Description linkIndex number the index of the link in the action (starting from 1). status RuleStatus the status assigned to the link (see RuleStatus ) setting number the value assigned to the link's setting. setElseAction \u00b6 Sets the properties of an ELSE action in a rule-based control. setElseAction ( ruleIndex : number , actionIndex : number , linkIndex : number , status : RuleStatus , setting : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). actionIndex number the index of the ELSE action being modified (starting from 1). linkIndex number the index of the link in the action (starting from 1). status RuleStatus the status assigned to the link (see RuleStatus ) setting number the value assigned to the link's setting. setRulePriority \u00b6 Sets the priority of a rule-based control. setRulePriority ( index : number , priority : number ) : void ; Parameters Parameter Type Description index number the rule's index (starting from 1). priority number the priority value assigned to the rule.","title":"Rule Based Control"},{"location":"api/project-functions/rule-based-control/#rule-based-control-functions","text":"These functions are used for working with rule-based controls. Function Description addRule Adds a new rule-based control to a project. deleteRule Deletes an existing rule-based control. getRule Retrieves summary information about a rule-based control. getRuleId Gets the ID name of a rule-based control given its index. getPremise Gets the properties of a premise in a rule-based control. setPremise Sets the properties of a premise in a rule-based control. setPremiseIndex Sets the index of an object in a premise of a rule-based control. setPremiseStatus Sets the status being compared to in a premise of a rule-based control. setPremiseValue Sets the value in a premise of a rule-based control. getThenAction Gets the properties of a THEN action in a rule-based control. setThenAction Sets the properties of a THEN action in a rule-based control. getElseAction Gets the properties of an ELSE action in a rule-based control. setElseAction Sets the properties of an ELSE action in a rule-based control. setRulePriority Sets the priority of a rule-based control.","title":"Rule-Based Control Functions"},{"location":"api/project-functions/rule-based-control/#addrule","text":"Adds a new rule-based control to a project. addRule ( rule : string ) : void ; Parameters Parameter Type Description rule rule text of the rule following the format used in an EPANET input file. Consult the [RULES] section of the Input File topic to learn about a rule's format. Each clause of the rule must end with a newline character \\n.","title":"addRule"},{"location":"api/project-functions/rule-based-control/#deleterule","text":"Deletes an existing rule-based control. deleteRule ( index : number ) : void ; Parameters Parameter Type Description index number the index of the rule to be deleted (starting from 1).","title":"deleteRule"},{"location":"api/project-functions/rule-based-control/#getrule","text":"Retrieves summary information about a rule-based control. getRule ( index : number ) : { premiseCount : number ; thenActionCount : number ; elseActionCount : number ; priority : number ; }; Parameters Parameter Type Description index number the rule's index (starting from 1). Returns Object { premiseCount : number ; thenActionCount : number ; elseActionCount : number ; priority : number ; } Property Type Description premiseCount number number of premises in the rule's IF section. thenActionCount number number of actions in the rule's THEN section. elseActionCount number number of actions in the rule's ELSE section. priority number the rule's priority value.","title":"getRule"},{"location":"api/project-functions/rule-based-control/#getruleid","text":"Gets the ID name of a rule-based control given its index. getRuleId ( index : number ) : string ; Parameters Parameter Type Description index number the rule's index (starting from 1). Returns string the rule's ID name.","title":"getRuleId"},{"location":"api/project-functions/rule-based-control/#getpremise","text":"Gets the properties of a premise in a rule-based control. getPremise ( ruleIndex : number , premiseIndex : number ) : { logop : number ; object : RuleObject ; objIndex : number ; variable : RuleVariable ; relop : RuleOperator ; status : RuleStatus ; value : number ; }; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the position of the premise in the rule's list of premises (starting from 1). Returns Object { logop : number ; object : RuleObject ; objIndex : number ; variable : RuleVariable ; relop : RuleOperator ; status : RuleStatus ; value : number ; } Property Type Description logop number the premise's logical operator ( IF = 1, AND = 2, OR = 3 ). object RuleObject the type of object the premise refers to (see RuleObject ). objIndex number the index of the object (e.g. the index of a tank). variable RuleVariable the object's variable being compared (see RuleVariable ). relop RuleOperator the premise's comparison operator (see RuleOperator ). status RuleStatus the status that the object's status is compared to (see RuleStatus ). value number the value that the object's variable is compared to.","title":"getPremise"},{"location":"api/project-functions/rule-based-control/#setpremise","text":"Sets the properties of a premise in a rule-based control. setPremise ( ruleIndex : number , premiseIndex : number , logop : number , object : RuleObject , objIndex : number , variable : RuleVariable , relop : RuleOperator , status : RuleStatus , value : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the position of the premise in the rule's list of premises (starting from 1). logop number the premise's logical operator ( IF = 1, AND = 2, OR = 3 ). object RuleObject the type of object the premise refers to (see RuleObject ). objIndex number the index of the object (e.g. the index of a tank). variable RuleVariable the object's variable being compared (see RuleVariable ). relop RuleOperator the premise's comparison operator (see RuleOperator ). status RuleStatus the status that the object's status is compared to (see RuleStatus ). value number the value that the object's variable is compared to.","title":"setPremise"},{"location":"api/project-functions/rule-based-control/#setpremiseindex","text":"Sets the index of an object in a premise of a rule-based control. setPremiseIndex ( ruleIndex : number , premiseIndex : number , objIndex : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the premise's index (starting from 1). objIndex number the index of the premise's object (e.g. the index of a tank).","title":"setPremiseIndex"},{"location":"api/project-functions/rule-based-control/#setpremisestatus","text":"Sets the status being compared to in a premise of a rule-based control. setPremiseStatus ( ruleIndex : number , premiseIndex : number , status : RuleStatus ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the premise's index (starting from 1). status RuleStatus the status that the premise's object status is compared to (see RuleStatus ).","title":"setPremiseStatus"},{"location":"api/project-functions/rule-based-control/#setpremisevalue","text":"Sets the value in a premise of a rule-based control. setPremiseValue ( ruleIndex : number , premiseIndex : number , value : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). premiseIndex number the premise's index (starting from 1). value number The value that the premise's variable is compared to.","title":"setPremiseValue"},{"location":"api/project-functions/rule-based-control/#getthenaction","text":"Gets the properties of a THEN action in a rule-based control. getThenAction ( ruleIndex : number , actionIndex : number ) : { linkIndex : number ; status : RuleStatus ; setting : number ; }; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). actionIndex number the index of the THEN action to retrieve (starting from 1). Returns Object { linkIndex : number ; status : RuleStatus ; setting : number ; } Property Type Description linkIndex number the index of the link in the action (starting from 1). status RuleStatus the status assigned to the link (see RuleStatus ) setting number the value assigned to the link's setting.","title":"getThenAction"},{"location":"api/project-functions/rule-based-control/#setthenaction","text":"Sets the properties of a THEN action in a rule-based control. setThenAction ( ruleIndex : number , actionIndex : number , linkIndex : number , status : RuleStatus , setting : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). actionIndex number the index of the THEN action to modify (starting from 1). linkIndex number the index of the link in the action. status RuleStatus the new status assigned to the link (see RuleStatus ). setting number the new value assigned to the link's setting.","title":"setThenAction"},{"location":"api/project-functions/rule-based-control/#getelseaction","text":"Sets the properties of an ELSE action in a rule-based control. getElseAction ( ruleIndex : number , actionIndex : number ) : { linkIndex : number ; status : RuleStatus ; setting : number ; }; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). actionIndex number the index of the ELSE action to retrieve (starting from 1). Returns Object { linkIndex : number ; status : RuleStatus ; setting : number ; } Property Type Description linkIndex number the index of the link in the action (starting from 1). status RuleStatus the status assigned to the link (see RuleStatus ) setting number the value assigned to the link's setting.","title":"getElseAction"},{"location":"api/project-functions/rule-based-control/#setelseaction","text":"Sets the properties of an ELSE action in a rule-based control. setElseAction ( ruleIndex : number , actionIndex : number , linkIndex : number , status : RuleStatus , setting : number ) : void ; Parameters Parameter Type Description ruleIndex number the rule's index (starting from 1). actionIndex number the index of the ELSE action being modified (starting from 1). linkIndex number the index of the link in the action (starting from 1). status RuleStatus the status assigned to the link (see RuleStatus ) setting number the value assigned to the link's setting.","title":"setElseAction"},{"location":"api/project-functions/rule-based-control/#setrulepriority","text":"Sets the priority of a rule-based control. setRulePriority ( index : number , priority : number ) : void ; Parameters Parameter Type Description index number the rule's index (starting from 1). priority number the priority value assigned to the rule.","title":"setRulePriority"},{"location":"api/project-functions/simple-control/","text":"Simple Control Functions \u00b6 These functions are used for working with simple conditional controls. Function Description addControl Adds a new simple control to a project. deleteControl Deletes an existing simple control. getControl Retrieves the properties of a simple control. setControl Sets the properties of an existing simple control. addControl \u00b6 Adds a new simple control to a project. addControl ( type : ControlType , linkIndex : number , setting : number , nodeIndex : number , level : number ) : number ; Parameters Parameter Type Description type ControlType the type of control to add (see ControlType ). linkIndex number the index of a link to control (starting from 1). setting number control setting applied to the link. nodeIndex number index of the node used to control the link (0 for ControlType.Timer and ControlType.TimeOfDay controls). level number action level (tank level, junction pressure, or time in seconds) that triggers the control. Returns Number index of the new control. deleteControl \u00b6 Deletes an existing simple control. deleteControl ( index : number ) : void ; Parameters Parameter Type Description index number the index of the control to delete (starting from 1). getControl \u00b6 Retrieves the properties of a simple control. getControl ( index : number ) : { type : ControlType ; linkIndex : number ; setting : number ; nodeIndex : number ; level : number ; }; Parameters Parameter Type Description index number the control's index (starting from 1). Returns Object { type : ControlType ; linkIndex : number ; setting : number ; nodeIndex : number ; level : number ; } Property Type Description type ControlType the type of control to add (see ControlType ). linkIndex number the index of a link to control (starting from 1). setting number control setting applied to the link. nodeIndex number index of the node used to control the link (0 for ControlType.Timer and ControlType.TimeOfDay controls). level number action level (tank level, junction pressure, or time in seconds) that triggers the control. setControl \u00b6 Sets the properties of an existing simple control. setControl ( index : number , type : ControlType , linkIndex : number , setting : number , nodeIndex : number , level : number ) : void ; Parameters Parameter Type Description index number the control's index (starting from 1). type ControlType the type of control to add (see ControlType ). linkIndex number the index of a link to control (starting from 1). setting number control setting applied to the link. nodeIndex number index of the node used to control the link (0 for ControlType.Timer and ControlType.TimeOfDay controls). level number action level (tank level, junction pressure, or time in seconds) that triggers the control.","title":"Simple Control"},{"location":"api/project-functions/simple-control/#simple-control-functions","text":"These functions are used for working with simple conditional controls. Function Description addControl Adds a new simple control to a project. deleteControl Deletes an existing simple control. getControl Retrieves the properties of a simple control. setControl Sets the properties of an existing simple control.","title":"Simple Control Functions"},{"location":"api/project-functions/simple-control/#addcontrol","text":"Adds a new simple control to a project. addControl ( type : ControlType , linkIndex : number , setting : number , nodeIndex : number , level : number ) : number ; Parameters Parameter Type Description type ControlType the type of control to add (see ControlType ). linkIndex number the index of a link to control (starting from 1). setting number control setting applied to the link. nodeIndex number index of the node used to control the link (0 for ControlType.Timer and ControlType.TimeOfDay controls). level number action level (tank level, junction pressure, or time in seconds) that triggers the control. Returns Number index of the new control.","title":"addControl"},{"location":"api/project-functions/simple-control/#deletecontrol","text":"Deletes an existing simple control. deleteControl ( index : number ) : void ; Parameters Parameter Type Description index number the index of the control to delete (starting from 1).","title":"deleteControl"},{"location":"api/project-functions/simple-control/#getcontrol","text":"Retrieves the properties of a simple control. getControl ( index : number ) : { type : ControlType ; linkIndex : number ; setting : number ; nodeIndex : number ; level : number ; }; Parameters Parameter Type Description index number the control's index (starting from 1). Returns Object { type : ControlType ; linkIndex : number ; setting : number ; nodeIndex : number ; level : number ; } Property Type Description type ControlType the type of control to add (see ControlType ). linkIndex number the index of a link to control (starting from 1). setting number control setting applied to the link. nodeIndex number index of the node used to control the link (0 for ControlType.Timer and ControlType.TimeOfDay controls). level number action level (tank level, junction pressure, or time in seconds) that triggers the control.","title":"getControl"},{"location":"api/project-functions/simple-control/#setcontrol","text":"Sets the properties of an existing simple control. setControl ( index : number , type : ControlType , linkIndex : number , setting : number , nodeIndex : number , level : number ) : void ; Parameters Parameter Type Description index number the control's index (starting from 1). type ControlType the type of control to add (see ControlType ). linkIndex number the index of a link to control (starting from 1). setting number control setting applied to the link. nodeIndex number index of the node used to control the link (0 for ControlType.Timer and ControlType.TimeOfDay controls). level number action level (tank level, junction pressure, or time in seconds) that triggers the control.","title":"setControl"},{"location":"api/project-functions/time-pattern/","text":"Time Pattern Functions \u00b6 These functions are used for working with time patterns. Function Description addPattern Adds a new time pattern to a project. deletePattern Deletes a time pattern from a project. getPatternIndex Retrieves the index of a time pattern given its ID name. getPatternId Retrieves the ID name of a time pattern given its index. setPatternId Changes the ID name of a time pattern given its index. getPatternLenth Retrieves the number of time periods in a time pattern. getPatternValue Retrieves a time pattern's factor for a given time period. setPatternValue Sets a time pattern's factor for a given time period. getAveragePatternValue Retrieves the average of all pattern factors in a time pattern. setPattern Sets the pattern factors for a given time pattern. addPattern \u00b6 Adds a new time pattern to a project. addPattern ( id : string ) : void ; Parameters Parameter Type Description id string the ID name of the pattern to add. The new pattern contains a single time period whose factor is 1.0. deletePattern \u00b6 Deletes a time pattern from a project. deletePattern ( index : number ) : void ; Parameters Parameter Type Description index number the time pattern's index (starting from 1). getPatternIndex \u00b6 Retrieves the index of a time pattern given its ID name. getPatternIndex ( id : string ) : number ; Parameters Parameter Type Description id string the ID name of a time pattern. Returns Number the time pattern's index (starting from 1). getPatternId \u00b6 Retrieves the ID name of a time pattern given its index. getPatternId ( index : number ) : string ; Parameters Parameter Type Description index number a time pattern index (starting from 1). Returns string the time pattern's ID name. setPatternId \u00b6 Changes the ID name of a time pattern given its index. setPatternId ( index : number , id : string ) : void ; Parameters Parameter Type Description index number a time pattern index (starting from 1). id string the time pattern's new ID name. getPatternLenth \u00b6 Retrieves the number of time periods in a time pattern. getPatternLenth ( index : number ) : number ; Parameters Parameter Type Description index number a time pattern index (starting from 1). Returns Number the number of time periods in the pattern. getPatternValue \u00b6 Retrieves a time pattern's factor for a given time period. getPatternValue ( index : number , period : number ) : number ; Parameters Parameter Type Description index number a time pattern index (starting from 1). period number a time period in the pattern (starting from 1). Returns Number the pattern factor for the given time period. setPatternValue \u00b6 Sets a time pattern's factor for a given time period. setPatternValue ( index : number , period : number , value : number ) : void ; Parameters Parameter Type Description index number a time pattern index (starting from 1). period number a time period in the pattern (starting from 1). value number the new value of the pattern factor for the given time period. getAveragePatternValue \u00b6 Retrieves the average of all pattern factors in a time pattern. getAveragePatternValue ( index : number ) : number ; Parameters Parameter Type Description index number a time pattern index (starting from 1). Returns Number The average of all of the time pattern's factors. setPattern \u00b6 Sets the pattern factors for a given time pattern. setPattern ( index : number , values : number []) : void ; Parameters Parameter Type Description index number a time pattern index (starting from 1). values number[] an array of new pattern factor values. Use this function to redefine (and resize) a time pattern all at once; use setPatternValue to revise pattern factors one at a time.","title":"Time Pattern"},{"location":"api/project-functions/time-pattern/#time-pattern-functions","text":"These functions are used for working with time patterns. Function Description addPattern Adds a new time pattern to a project. deletePattern Deletes a time pattern from a project. getPatternIndex Retrieves the index of a time pattern given its ID name. getPatternId Retrieves the ID name of a time pattern given its index. setPatternId Changes the ID name of a time pattern given its index. getPatternLenth Retrieves the number of time periods in a time pattern. getPatternValue Retrieves a time pattern's factor for a given time period. setPatternValue Sets a time pattern's factor for a given time period. getAveragePatternValue Retrieves the average of all pattern factors in a time pattern. setPattern Sets the pattern factors for a given time pattern.","title":"Time Pattern Functions"},{"location":"api/project-functions/time-pattern/#addpattern","text":"Adds a new time pattern to a project. addPattern ( id : string ) : void ; Parameters Parameter Type Description id string the ID name of the pattern to add. The new pattern contains a single time period whose factor is 1.0.","title":"addPattern"},{"location":"api/project-functions/time-pattern/#deletepattern","text":"Deletes a time pattern from a project. deletePattern ( index : number ) : void ; Parameters Parameter Type Description index number the time pattern's index (starting from 1).","title":"deletePattern"},{"location":"api/project-functions/time-pattern/#getpatternindex","text":"Retrieves the index of a time pattern given its ID name. getPatternIndex ( id : string ) : number ; Parameters Parameter Type Description id string the ID name of a time pattern. Returns Number the time pattern's index (starting from 1).","title":"getPatternIndex"},{"location":"api/project-functions/time-pattern/#getpatternid","text":"Retrieves the ID name of a time pattern given its index. getPatternId ( index : number ) : string ; Parameters Parameter Type Description index number a time pattern index (starting from 1). Returns string the time pattern's ID name.","title":"getPatternId"},{"location":"api/project-functions/time-pattern/#setpatternid","text":"Changes the ID name of a time pattern given its index. setPatternId ( index : number , id : string ) : void ; Parameters Parameter Type Description index number a time pattern index (starting from 1). id string the time pattern's new ID name.","title":"setPatternId"},{"location":"api/project-functions/time-pattern/#getpatternlenth","text":"Retrieves the number of time periods in a time pattern. getPatternLenth ( index : number ) : number ; Parameters Parameter Type Description index number a time pattern index (starting from 1). Returns Number the number of time periods in the pattern.","title":"getPatternLenth"},{"location":"api/project-functions/time-pattern/#getpatternvalue","text":"Retrieves a time pattern's factor for a given time period. getPatternValue ( index : number , period : number ) : number ; Parameters Parameter Type Description index number a time pattern index (starting from 1). period number a time period in the pattern (starting from 1). Returns Number the pattern factor for the given time period.","title":"getPatternValue"},{"location":"api/project-functions/time-pattern/#setpatternvalue","text":"Sets a time pattern's factor for a given time period. setPatternValue ( index : number , period : number , value : number ) : void ; Parameters Parameter Type Description index number a time pattern index (starting from 1). period number a time period in the pattern (starting from 1). value number the new value of the pattern factor for the given time period.","title":"setPatternValue"},{"location":"api/project-functions/time-pattern/#getaveragepatternvalue","text":"Retrieves the average of all pattern factors in a time pattern. getAveragePatternValue ( index : number ) : number ; Parameters Parameter Type Description index number a time pattern index (starting from 1). Returns Number The average of all of the time pattern's factors.","title":"getAveragePatternValue"},{"location":"api/project-functions/time-pattern/#setpattern","text":"Sets the pattern factors for a given time pattern. setPattern ( index : number , values : number []) : void ; Parameters Parameter Type Description index number a time pattern index (starting from 1). values number[] an array of new pattern factor values. Use this function to redefine (and resize) a time pattern all at once; use setPatternValue to revise pattern factors one at a time.","title":"setPattern"},{"location":"api/project-functions/water-quality/","text":"Water Quality Analysis Functions \u00b6 These functions are used to perform a water quality analysis. Function Description solveQ Runs a complete water quality simulation with results at uniform reporting intervals written to the project's binary output file. openQ Opens a project's water quality solver. initQ Initializes a network prior to running a water quality analysis. runQ Makes hydraulic and water quality results at the start of the current time period available to a project's water quality solver. nextQ Advances a water quality simulation over the time until the next hydraulic event. stepQ Advances a water quality simulation by a single water quality time step. closeQ Closes the water quality solver, freeing all of its allocated memory. solveQ \u00b6 Runs a complete water quality simulation with results at uniform reporting intervals written to the project's binary output file. solveQ () : void ; A hydraulic analysis must have been run and saved to a hydraulics file before calling solveQ . This function will not allow one to examine intermediate water quality results as they are generated. It can be followed by a call to report to write all hydraulic and water quality results to a formatted report file. One can instead use the openQ - initQ - runQ - nextQ - closeQ sequence to gain access to water quality results at intermediate time periods. openQ \u00b6 Opens a project's water quality solver. openQ () : void ; Call openQ prior to running the first water quality analysis using an initQ - runQ - nextQ (or stepQ ) sequence. Multiple water quality analyses can be made before calling closeQ to close the water quality solver. Do not call this function if a complete water quality analysis will be made using solveQ . initQ \u00b6 Initializes a network prior to running a water quality analysis. initQ ( initFlag : InitHydOption.Save | InitHydOption . NoSave ) : void ; Parameters Parameter Type Description initFlag InitHydOption.Save InitHydOption.NoSave set to InitHydOption.Save if results are to be saved to the project's binary output file, or to InitHydOption.NoSave if not. (see InitHydOption ) Call initQ prior to running a water quality analysis using runQ in conjunction with either nextQ or stepQ . openQ must have been called prior to calling initQ . Do not call initQ if a complete water quality analysis will be made using solveQ . runQ \u00b6 Makes hydraulic and water quality results at the start of the current time period available to a project's water quality solver. runQ () : number ; Returns Number current simulation time in seconds. Use runQ along with nextQ in a loop to access water quality results at the start of each hydraulic period in an extended period simulation. Or use it in a loop with stepQ to access results at the start of each water quality time step. initQ must have been called prior to running an runQ - nextQ (or stepQ ) loop. The current time of the simulation is determined from information saved with the hydraulic analysis that preceded the water quality analysis. nextQ \u00b6 Advances a water quality simulation over the time until the next hydraulic event. nextQ () : number ; Returns Number time (in seconds) until the next hydraulic event or 0 if at the end of the full simulation duration. This function is used in a loop with runQ to perform an extended period water quality analysis. It reacts and routes a project's water quality constituent over a time step determined by when the next hydraulic event occurs. Use stepQ instead if you wish to generate results over each water quality time step. The return is determined from information produced by the hydraulic analysis that preceded the water quality analysis. stepQ \u00b6 Advances a water quality simulation by a single water quality time step. stepQ () : number ; Returns Number time left (in seconds) to the overall simulation duration. This function is used in a loop with runQ to perform an extended period water quality simulation. It allows one to generate water quality results at each water quality time step of the simulation, rather than over each hydraulic event period as with nextQ . Use the returned value to determine when no more calls to runQ are needed because the end of the simulation period has been reached (i.e., when timeLeft = 0). closeQ \u00b6 Closes the water quality solver, freeing all of its allocated memory. closeQ () : void ; Call closeQ after all water quality analyses have been made using the initQ - runQ - nextQ (or stepQ ) sequence of function calls. Do not call this function if solveQ is being used.","title":"Water Quality"},{"location":"api/project-functions/water-quality/#water-quality-analysis-functions","text":"These functions are used to perform a water quality analysis. Function Description solveQ Runs a complete water quality simulation with results at uniform reporting intervals written to the project's binary output file. openQ Opens a project's water quality solver. initQ Initializes a network prior to running a water quality analysis. runQ Makes hydraulic and water quality results at the start of the current time period available to a project's water quality solver. nextQ Advances a water quality simulation over the time until the next hydraulic event. stepQ Advances a water quality simulation by a single water quality time step. closeQ Closes the water quality solver, freeing all of its allocated memory.","title":"Water Quality Analysis Functions"},{"location":"api/project-functions/water-quality/#solveq","text":"Runs a complete water quality simulation with results at uniform reporting intervals written to the project's binary output file. solveQ () : void ; A hydraulic analysis must have been run and saved to a hydraulics file before calling solveQ . This function will not allow one to examine intermediate water quality results as they are generated. It can be followed by a call to report to write all hydraulic and water quality results to a formatted report file. One can instead use the openQ - initQ - runQ - nextQ - closeQ sequence to gain access to water quality results at intermediate time periods.","title":"solveQ"},{"location":"api/project-functions/water-quality/#openq","text":"Opens a project's water quality solver. openQ () : void ; Call openQ prior to running the first water quality analysis using an initQ - runQ - nextQ (or stepQ ) sequence. Multiple water quality analyses can be made before calling closeQ to close the water quality solver. Do not call this function if a complete water quality analysis will be made using solveQ .","title":"openQ"},{"location":"api/project-functions/water-quality/#initq","text":"Initializes a network prior to running a water quality analysis. initQ ( initFlag : InitHydOption.Save | InitHydOption . NoSave ) : void ; Parameters Parameter Type Description initFlag InitHydOption.Save InitHydOption.NoSave set to InitHydOption.Save if results are to be saved to the project's binary output file, or to InitHydOption.NoSave if not. (see InitHydOption ) Call initQ prior to running a water quality analysis using runQ in conjunction with either nextQ or stepQ . openQ must have been called prior to calling initQ . Do not call initQ if a complete water quality analysis will be made using solveQ .","title":"initQ"},{"location":"api/project-functions/water-quality/#runq","text":"Makes hydraulic and water quality results at the start of the current time period available to a project's water quality solver. runQ () : number ; Returns Number current simulation time in seconds. Use runQ along with nextQ in a loop to access water quality results at the start of each hydraulic period in an extended period simulation. Or use it in a loop with stepQ to access results at the start of each water quality time step. initQ must have been called prior to running an runQ - nextQ (or stepQ ) loop. The current time of the simulation is determined from information saved with the hydraulic analysis that preceded the water quality analysis.","title":"runQ"},{"location":"api/project-functions/water-quality/#nextq","text":"Advances a water quality simulation over the time until the next hydraulic event. nextQ () : number ; Returns Number time (in seconds) until the next hydraulic event or 0 if at the end of the full simulation duration. This function is used in a loop with runQ to perform an extended period water quality analysis. It reacts and routes a project's water quality constituent over a time step determined by when the next hydraulic event occurs. Use stepQ instead if you wish to generate results over each water quality time step. The return is determined from information produced by the hydraulic analysis that preceded the water quality analysis.","title":"nextQ"},{"location":"api/project-functions/water-quality/#stepq","text":"Advances a water quality simulation by a single water quality time step. stepQ () : number ; Returns Number time left (in seconds) to the overall simulation duration. This function is used in a loop with runQ to perform an extended period water quality simulation. It allows one to generate water quality results at each water quality time step of the simulation, rather than over each hydraulic event period as with nextQ . Use the returned value to determine when no more calls to runQ are needed because the end of the simulation period has been reached (i.e., when timeLeft = 0).","title":"stepQ"},{"location":"api/project-functions/water-quality/#closeq","text":"Closes the water quality solver, freeing all of its allocated memory. closeQ () : void ; Call closeQ after all water quality analyses have been made using the initQ - runQ - nextQ (or stepQ ) sequence of function calls. Do not call this function if solveQ is being used.","title":"closeQ"},{"location":"blog/","text":"Header \u00b6 Test index","title":"List all articles"},{"location":"blog/#header","text":"Test index","title":"Header"},{"location":"blog/2020/05-17-using-mkdocs-build-epanet-js-website/","text":"Using MkDocs to build the epanet-js website \u00b6 Hey, you got here early! This article is still being written and will talk about how I used MkDocs and Material for Mkdocs to create this website.","title":"Using MkDocs to build the epanet-js website"},{"location":"blog/2020/05-17-using-mkdocs-build-epanet-js-website/#using-mkdocs-to-build-the-epanet-js-website","text":"Hey, you got here early! This article is still being written and will talk about how I used MkDocs and Material for Mkdocs to create this website.","title":"Using MkDocs to build the epanet-js website"},{"location":"blog/2020/05-18-epanet-js-progress-report-2020/","text":"epanet-js Progress Report - April 2020 \u00b6 Hey, you got here early! This article is still being written and will talk about the progress so far in the library and what will be worked on next.","title":"epanet-js Progress Report - May 2020"},{"location":"blog/2020/05-18-epanet-js-progress-report-2020/#epanet-js-progress-report-april-2020","text":"Hey, you got here early! This article is still being written and will talk about the progress so far in the library and what will be worked on next.","title":"epanet-js Progress Report - April 2020"},{"location":"introduction/","text":"About epanet-js \u00b6 Epanet-js is a full port of version 2.2 OWA-EPANET Toolkit in Typescript, providing access to all 122 functions within the toolkit. The JavaScript library is for engineers, developers and academics to run and share hydraulic analyses or create custom front end or server-side applications. epanet-js allows you to simulate water distribution networks in javascript using the EPANET engine. If you're not familiar with either water modelling or EPANET, have a read through what is water modelling . Both epanet-js and @model-create/epanet-engine are MIT licenced , which allows the library to be used in comerical applications. The hydraulic engine used within the epanet-js library is OWA-EPANET 2.2 , which is also MIT licenced , with contributions by the following authors . The source code for the project is hosted on GitHub and external contributions are welcome! You can learn more about the development process , our roadmap and also visit the Github repo . To get started in using epanet-js, follow the instruction below to install the library in your applicant. To see complex applications built on top of epanet-js, check out the showcase . If you have a project which uses epanet-js and want to share it, please let us know! Install \u00b6 To install the stable version with npm: $ npm install epanet-js or with yarn: $ yarn add epanet-js For those without a module bundler, the epanet-js package will soon be available on unpkg as a precompiled UMD build. This will allow you to drop a UMD build in a <script> tag on your page and access it on the window.epanetJs global variable. Usage \u00b6 Load and run an existing inp File \u00b6 Run this example on CodeSandbox import { Project , Workspace } from \"epanet-js\" ; import fs from \"fs\" ; // Read an existing inp file from the disk const net1 = fs . readFileSync ( \"net1.inp\" ); // Initialise a new Workspace and Project object const ws = new Workspace (); const model = new Project ( ws ); // Write a copy of the inp file to the workspace ws . writeFile ( \"net1.inp\" , net1 ); // Runs toolkit methods: EN_open, EN_solveH & EN_close model . open ( \"net1.inp\" , \"report.rpt\" , \"out.bin\" ); model . solveH (); model . close (); See the complete list of examples in the examples page .","title":"Getting Started"},{"location":"introduction/#about-epanet-js","text":"Epanet-js is a full port of version 2.2 OWA-EPANET Toolkit in Typescript, providing access to all 122 functions within the toolkit. The JavaScript library is for engineers, developers and academics to run and share hydraulic analyses or create custom front end or server-side applications. epanet-js allows you to simulate water distribution networks in javascript using the EPANET engine. If you're not familiar with either water modelling or EPANET, have a read through what is water modelling . Both epanet-js and @model-create/epanet-engine are MIT licenced , which allows the library to be used in comerical applications. The hydraulic engine used within the epanet-js library is OWA-EPANET 2.2 , which is also MIT licenced , with contributions by the following authors . The source code for the project is hosted on GitHub and external contributions are welcome! You can learn more about the development process , our roadmap and also visit the Github repo . To get started in using epanet-js, follow the instruction below to install the library in your applicant. To see complex applications built on top of epanet-js, check out the showcase . If you have a project which uses epanet-js and want to share it, please let us know!","title":"About epanet-js"},{"location":"introduction/#install","text":"To install the stable version with npm: $ npm install epanet-js or with yarn: $ yarn add epanet-js For those without a module bundler, the epanet-js package will soon be available on unpkg as a precompiled UMD build. This will allow you to drop a UMD build in a <script> tag on your page and access it on the window.epanetJs global variable.","title":"Install"},{"location":"introduction/#usage","text":"","title":"Usage"},{"location":"introduction/#load-and-run-an-existing-inp-file","text":"Run this example on CodeSandbox import { Project , Workspace } from \"epanet-js\" ; import fs from \"fs\" ; // Read an existing inp file from the disk const net1 = fs . readFileSync ( \"net1.inp\" ); // Initialise a new Workspace and Project object const ws = new Workspace (); const model = new Project ( ws ); // Write a copy of the inp file to the workspace ws . writeFile ( \"net1.inp\" , net1 ); // Runs toolkit methods: EN_open, EN_solveH & EN_close model . open ( \"net1.inp\" , \"report.rpt\" , \"out.bin\" ); model . solveH (); model . close (); See the complete list of examples in the examples page .","title":"Load and run an existing inp File"},{"location":"introduction/development/","text":"Roadmap \u00b6 Reaching version 1.0.0 is the current focus, the first non-beta version will have API stability and have mirrored functions of each method in the EPANET Toolkit. Also planned are helper classes and an object-oriented wrapper to allow simpler development of applications using the EPANET engine. See the remaining task on the Version 1.0.0 Project . Build \u00b6 epanet-js is split into two packages, the epanet-engine package which wraps the original C code in C++ and compiles it to JavaScript using Emscripten. And epanet-js is a TypeScript library which wraps over the generated module from Emscripten and manages memory allocation, error handling and returning of varaible. Building epanet-engine The first command yarn run build:dockerimage creates a docker container of Emscripten and the compiled OWA-EPANET source code, you can then run yarn run build to compile the C++ wrapper into Javascript. cd packages/epanet-engine yarn run build:dockerimage yarn run build Building epanet-js You must first build epanet-engine before you can lint, test or build epanet-js. cd packages/epanet-js yarn run lint yarn run test yarn run build","title":"Library Development"},{"location":"introduction/development/#roadmap","text":"Reaching version 1.0.0 is the current focus, the first non-beta version will have API stability and have mirrored functions of each method in the EPANET Toolkit. Also planned are helper classes and an object-oriented wrapper to allow simpler development of applications using the EPANET engine. See the remaining task on the Version 1.0.0 Project .","title":"Roadmap"},{"location":"introduction/development/#build","text":"epanet-js is split into two packages, the epanet-engine package which wraps the original C code in C++ and compiles it to JavaScript using Emscripten. And epanet-js is a TypeScript library which wraps over the generated module from Emscripten and manages memory allocation, error handling and returning of varaible. Building epanet-engine The first command yarn run build:dockerimage creates a docker container of Emscripten and the compiled OWA-EPANET source code, you can then run yarn run build to compile the C++ wrapper into Javascript. cd packages/epanet-engine yarn run build:dockerimage yarn run build Building epanet-js You must first build epanet-engine before you can lint, test or build epanet-js. cd packages/epanet-js yarn run lint yarn run test yarn run build","title":"Build"},{"location":"introduction/examples/","text":"Step through the hydraulic simulation \u00b6 Use the openH - initH - runH - nextH - closeH series of functions to step through the simulation one hydraulic time step at a time. Run this example on CodeSandbox const { Project , Workspace } = require ( \"epanet-js\" ); var fs = require ( \"fs\" ); const net1 = fs . readFileSync ( \"net1.inp\" ); const ws = new Workspace (); const model = new Project ( ws ); ws . writeFile ( \"net1.inp\" , net1 ); model . open ( \"net1.inp\" , \"report.rpt\" , \"out.bin\" ); const n11Index = model . getNodeIndex ( \"11\" ); model . openH (); model . initH ( 11 ); let tStep = Infinity ; do { const cTime = model . runH (); const pressure = model . getNodeValue ( n11Index , 11 ); console . log ( `Current Time: - ${ cTime } , Node 11 Pressure: ${ pressure . toFixed ( 2 ) } ` ); tStep = model . nextH (); } while ( tStep > 0 ); model . saveH (); model . closeH (); New model builder API \u00b6 Allows networks to be built completely from function calls instead of from an input file. import { Project , Workspace } from \"epanet-js\" ; const ws = new Workspace (); const model = new Project ( ws ); model . init ( \"report.rpt\" , \"out.bin\" , 0 , 0 ); const n1Index = model . addNode ( \"N1\" , NodeType . Junction ); const n2Index = model . addNode ( \"N2\" , NodeType . Junction ); model . setJunctionData ( n1Index , 700 , 0 , \"\" ); model . setJunctionData ( n2Index , 400 , 0 , \"\" ); const l1Index = model . addLink ( \"L1\" , LinkType . Pipe , \"N1\" , \"N2\" ); Fire Flow Analysis - React Example \u00b6 A more complex example that uses React. Select a node within a network, run an extended period simulation and conduct a fire flow test. Results displayed in a graph for pressure and the fire flow. Run this example on CodeSandbox import React, { useState } from \"react\"; import { VictoryChart, VictoryLine, VictoryAxis, VictoryTheme } from \"victory\"; import { Project, Workspace, InitHydOption, NodeProperty, CountType, NodeType, } from \"epanet-js\"; var fs = require(\"fs\"); const net1 = fs.readFileSync(\"net1.inp\"); const ws = new Workspace(); const model = new Project(ws); ws.writeFile(\"net1.inp\", net1); model.open(\"net1.inp\", \"report.rpt\", \"out.bin\"); function getNodes() { const nodeCount = model.getCount(CountType.NodeCount); let nodeIds = []; for (let i = 1; i < nodeCount; i++) { if (model.getNodeType(i) === NodeType.Junction) { const nodeId = model.getNodeId(i); nodeIds.push(nodeId); } } return nodeIds; } function runSim(nodeId) { const fireFlowNodeIndex = model.getNodeIndex(nodeId); const flows = [100, 250, 500, 750, 1000]; model.openH(); model.initH(InitHydOption.NoSave); let tStep = Infinity; let flowAndPressure = []; let fireResults = []; do { const cTime = model.runH(); const pressure = model.getNodeValue( fireFlowNodeIndex, NodeProperty.Pressure ); flowAndPressure.push({ x: cTime / 60 / 60, y: pressure }); if (cTime === 46800) { fireResults = fireFlowAnalysis(model, fireFlowNodeIndex, flows, pressure); model.runH(); // Rerun original snapshot } tStep = model.nextH(); } while (tStep > 0); model.closeH(); return { flowAndPressure, fireResults, }; } function fireFlowAnalysis(model, index, flows, zeroPressure) { const acc = [{ x: 0, y: zeroPressure }]; const orgBaseFlow = model.getNodeValue(index, NodeProperty.BaseDemand); const pressures = flows.reduce((acc, flow) => { model.setNodeValue(index, NodeProperty.BaseDemand, orgBaseFlow + flow); model.runH(); const pressure = model.getNodeValue(index, NodeProperty.Pressure); return acc.concat([{ x: flow, y: pressure }]); }, acc); model.setNodeValue(index, NodeProperty.BaseDemand, orgBaseFlow); return pressures; } function SmallChart(props) { return ( <VictoryChart theme={VictoryTheme.material} height={175}> <VictoryAxis style={{ axisLabel: { fontSize: 8, padding: 30 }, tickLabels: { fontSize: 6, padding: 5 }, }} label={props.xLabel} /> <VictoryAxis style={{ axisLabel: { fontSize: 8, padding: 30 }, tickLabels: { fontSize: 6, padding: 5 }, }} dependentAxis label={props.yLabel} /> <VictoryLine data={props.data} /> </VictoryChart> ); } export default function App() { const [nodeId, setNodeId] = useState(\"11\"); function handleSelectChange(e) { setNodeId(e.target.value); } const nodeIds = getNodes(); const { flowAndPressure, fireResults } = runSim(nodeId); return ( <div className=\"App\"> <h1>epanet-js React Fire Flow Example</h1> <h2>Select a node to test</h2> <select value={nodeId} onChange={handleSelectChange}> {nodeIds.map((n, i) => { return ( <option key={i} value={n}> {n} </option> ); })} </select> <h3>Fireflow at Node {nodeId}</h3> <SmallChart data={fireResults} xLabel=\"Flow (GPM)\" yLabel=\"Pressure (psi)\" /> <h3>Pressure at Node {nodeId}</h3> <SmallChart data={flowAndPressure} xLabel=\"Time (hours)\" yLabel=\"Pressure (psi)\" /> </div> ); }","title":"Examples"},{"location":"introduction/examples/#step-through-the-hydraulic-simulation","text":"Use the openH - initH - runH - nextH - closeH series of functions to step through the simulation one hydraulic time step at a time. Run this example on CodeSandbox const { Project , Workspace } = require ( \"epanet-js\" ); var fs = require ( \"fs\" ); const net1 = fs . readFileSync ( \"net1.inp\" ); const ws = new Workspace (); const model = new Project ( ws ); ws . writeFile ( \"net1.inp\" , net1 ); model . open ( \"net1.inp\" , \"report.rpt\" , \"out.bin\" ); const n11Index = model . getNodeIndex ( \"11\" ); model . openH (); model . initH ( 11 ); let tStep = Infinity ; do { const cTime = model . runH (); const pressure = model . getNodeValue ( n11Index , 11 ); console . log ( `Current Time: - ${ cTime } , Node 11 Pressure: ${ pressure . toFixed ( 2 ) } ` ); tStep = model . nextH (); } while ( tStep > 0 ); model . saveH (); model . closeH ();","title":"Step through the hydraulic simulation"},{"location":"introduction/examples/#new-model-builder-api","text":"Allows networks to be built completely from function calls instead of from an input file. import { Project , Workspace } from \"epanet-js\" ; const ws = new Workspace (); const model = new Project ( ws ); model . init ( \"report.rpt\" , \"out.bin\" , 0 , 0 ); const n1Index = model . addNode ( \"N1\" , NodeType . Junction ); const n2Index = model . addNode ( \"N2\" , NodeType . Junction ); model . setJunctionData ( n1Index , 700 , 0 , \"\" ); model . setJunctionData ( n2Index , 400 , 0 , \"\" ); const l1Index = model . addLink ( \"L1\" , LinkType . Pipe , \"N1\" , \"N2\" );","title":"New model builder API"},{"location":"introduction/examples/#fire-flow-analysis-react-example","text":"A more complex example that uses React. Select a node within a network, run an extended period simulation and conduct a fire flow test. Results displayed in a graph for pressure and the fire flow. Run this example on CodeSandbox import React, { useState } from \"react\"; import { VictoryChart, VictoryLine, VictoryAxis, VictoryTheme } from \"victory\"; import { Project, Workspace, InitHydOption, NodeProperty, CountType, NodeType, } from \"epanet-js\"; var fs = require(\"fs\"); const net1 = fs.readFileSync(\"net1.inp\"); const ws = new Workspace(); const model = new Project(ws); ws.writeFile(\"net1.inp\", net1); model.open(\"net1.inp\", \"report.rpt\", \"out.bin\"); function getNodes() { const nodeCount = model.getCount(CountType.NodeCount); let nodeIds = []; for (let i = 1; i < nodeCount; i++) { if (model.getNodeType(i) === NodeType.Junction) { const nodeId = model.getNodeId(i); nodeIds.push(nodeId); } } return nodeIds; } function runSim(nodeId) { const fireFlowNodeIndex = model.getNodeIndex(nodeId); const flows = [100, 250, 500, 750, 1000]; model.openH(); model.initH(InitHydOption.NoSave); let tStep = Infinity; let flowAndPressure = []; let fireResults = []; do { const cTime = model.runH(); const pressure = model.getNodeValue( fireFlowNodeIndex, NodeProperty.Pressure ); flowAndPressure.push({ x: cTime / 60 / 60, y: pressure }); if (cTime === 46800) { fireResults = fireFlowAnalysis(model, fireFlowNodeIndex, flows, pressure); model.runH(); // Rerun original snapshot } tStep = model.nextH(); } while (tStep > 0); model.closeH(); return { flowAndPressure, fireResults, }; } function fireFlowAnalysis(model, index, flows, zeroPressure) { const acc = [{ x: 0, y: zeroPressure }]; const orgBaseFlow = model.getNodeValue(index, NodeProperty.BaseDemand); const pressures = flows.reduce((acc, flow) => { model.setNodeValue(index, NodeProperty.BaseDemand, orgBaseFlow + flow); model.runH(); const pressure = model.getNodeValue(index, NodeProperty.Pressure); return acc.concat([{ x: flow, y: pressure }]); }, acc); model.setNodeValue(index, NodeProperty.BaseDemand, orgBaseFlow); return pressures; } function SmallChart(props) { return ( <VictoryChart theme={VictoryTheme.material} height={175}> <VictoryAxis style={{ axisLabel: { fontSize: 8, padding: 30 }, tickLabels: { fontSize: 6, padding: 5 }, }} label={props.xLabel} /> <VictoryAxis style={{ axisLabel: { fontSize: 8, padding: 30 }, tickLabels: { fontSize: 6, padding: 5 }, }} dependentAxis label={props.yLabel} /> <VictoryLine data={props.data} /> </VictoryChart> ); } export default function App() { const [nodeId, setNodeId] = useState(\"11\"); function handleSelectChange(e) { setNodeId(e.target.value); } const nodeIds = getNodes(); const { flowAndPressure, fireResults } = runSim(nodeId); return ( <div className=\"App\"> <h1>epanet-js React Fire Flow Example</h1> <h2>Select a node to test</h2> <select value={nodeId} onChange={handleSelectChange}> {nodeIds.map((n, i) => { return ( <option key={i} value={n}> {n} </option> ); })} </select> <h3>Fireflow at Node {nodeId}</h3> <SmallChart data={fireResults} xLabel=\"Flow (GPM)\" yLabel=\"Pressure (psi)\" /> <h3>Pressure at Node {nodeId}</h3> <SmallChart data={flowAndPressure} xLabel=\"Time (hours)\" yLabel=\"Pressure (psi)\" /> </div> ); }","title":"Fire Flow Analysis - React Example"},{"location":"introduction/showcase/","text":"The following apps were created using the epanet-js engine, please let us know any apps you've made. Model View \u00b6 Display models created in EPANET directly in the browser. No data leaves your computer; all data rendered and processed locally using the epanet-js library. Website : Model View Source Code : GitHub Model Calibrate \u00b6 Extract subsections of your InfoWorks WS Pro models and run them in your browser. As you make calibration changes such as modifying roughness or restriction valves the application runs an epanet model and compares the simulated results to those observered in the field. Website : Model Calibrate","title":"Showcase"},{"location":"introduction/showcase/#model-view","text":"Display models created in EPANET directly in the browser. No data leaves your computer; all data rendered and processed locally using the epanet-js library. Website : Model View Source Code : GitHub","title":"Model View"},{"location":"introduction/showcase/#model-calibrate","text":"Extract subsections of your InfoWorks WS Pro models and run them in your browser. As you make calibration changes such as modifying roughness or restriction valves the application runs an epanet model and compares the simulated results to those observered in the field. Website : Model Calibrate","title":"Model Calibrate"},{"location":"introduction/water-modelling/","text":"Water Modelling \u00b6 What is a hydraulic model \u00b6 Engineers use hydraulic modelling software to simulate water networks. A model will represent a network consisting of pipes, pumps, valves and storage tanks. The modelling software tracks the flow of water in each pipe, the pressure at each node, the height of water in each tank throughout the network during a multi-period simulation. EPANET \u00b6 History of the software \u00b6 EPANET is an industry-standard program, initially developed by the USEPA, to simulate water distribution networks, its source code was released in the public domain. An open-source fork by the Open Water Analytics (OWA) community has been released extending its original capabilities. Read more about EPANET on Wikipedia and the OWA community on their website . The EPANET Toolkit is an API written in C that allows developers to embed the EPANET's engine in their own applications. Ports of the toolkit exist in Python and Matlab; however, there are limited options to use the EPANET engine in JavaScript. EPANET in Javascript \u00b6 Epanet-js is a full port of version 2.2 OWA-EPANET Toolkit in Typescript, providing access to all 122 functions within the toolkit. The JavaScript library is for engineers, developers and academics to run and share hydraulic analyses or create custom front end or server-side applications.","title":"What is Water Modelling"},{"location":"introduction/water-modelling/#water-modelling","text":"","title":"Water Modelling"},{"location":"introduction/water-modelling/#what-is-a-hydraulic-model","text":"Engineers use hydraulic modelling software to simulate water networks. A model will represent a network consisting of pipes, pumps, valves and storage tanks. The modelling software tracks the flow of water in each pipe, the pressure at each node, the height of water in each tank throughout the network during a multi-period simulation.","title":"What is a hydraulic model"},{"location":"introduction/water-modelling/#epanet","text":"","title":"EPANET"},{"location":"introduction/water-modelling/#history-of-the-software","text":"EPANET is an industry-standard program, initially developed by the USEPA, to simulate water distribution networks, its source code was released in the public domain. An open-source fork by the Open Water Analytics (OWA) community has been released extending its original capabilities. Read more about EPANET on Wikipedia and the OWA community on their website . The EPANET Toolkit is an API written in C that allows developers to embed the EPANET's engine in their own applications. Ports of the toolkit exist in Python and Matlab; however, there are limited options to use the EPANET engine in JavaScript.","title":"History of the software"},{"location":"introduction/water-modelling/#epanet-in-javascript","text":"Epanet-js is a full port of version 2.2 OWA-EPANET Toolkit in Typescript, providing access to all 122 functions within the toolkit. The JavaScript library is for engineers, developers and academics to run and share hydraulic analyses or create custom front end or server-side applications.","title":"EPANET in Javascript"}]}